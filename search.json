[{"title":"AngularJS项目起步","url":"/2023/01/29/10-44-03/","content":"<p>创建一个名为www的新文件夹，将所有前端文件移入该文件夹，bower.js和.bowerrc无需移动，因为我们总希望工程化的东西在项目的根目录。</p>\n<p>打开命令行界面，执行下列指令，创建项目的身份证。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p>安装NodeJS后端依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save express mongoose mongodb express-session formidable</span><br></pre></td></tr></table></figure>\n\n<p>在根目录下创建app.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var express = require(&quot;express&quot;);</span><br><span class=\"line\">var mongoose = require(&quot;mongoose&quot;);</span><br><span class=\"line\">var session = require(&quot;express-session&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">//创建app</span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">//链接数据库，斜杠后面是数据库的名字</span><br><span class=\"line\">mongoose.connece(&quot;mongodb://localhost/test_erp&quot;);</span><br><span class=\"line\">//使用session</span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">\tsecret: &quot;test_erp&quot;,</span><br><span class=\"line\">\tcookie: &#123;maxAge: 1000 * 60 * 20&#125;,</span><br><span class=\"line\">\tresave: false,</span><br><span class=\"line\">\tsaveUninitialized: true</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">//静态资源文件</span><br><span class=\"line\">app.use(express.static(&#x27;www&#x27;));</span><br><span class=\"line\"></span><br><span class=\"line\">//设置404页面</span><br><span class=\"line\">app.use(function(req, res)&#123;</span><br><span class=\"line\">\tres.send(&quot;您好，您访问的页面不存在&quot;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//监听3000端口</span><br><span class=\"line\">app.listen(3000, function(err)&#123;</span><br><span class=\"line\">\tif(!err)&#123;</span><br><span class=\"line\">\t\tconsole.log(&quot;程序已经运行在3000端口&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在命令行启动项目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">node app.js</span><br></pre></td></tr></table></figure>\n\n<p>使用bower引入bootstrap</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bower install --save bootstrap</span><br></pre></td></tr></table></figure>\n\n<p>在www&#x2F;index.html引入样式表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;assets/bootstrap/css/bootstrap.min.css&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>修改www&#x2F;bootstrap.js文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27;bootstrap&#x27;: &#x27;assets/bootstrap/bootstrap.min&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>现在有两个路由表，一个是&#x2F;app.js（后端接口路由），一个是&#x2F;www&#x2F;app-routes.js（前端#!&#x2F;路由表）</p>\n"},{"title":"AngularJS的工程化","url":"/2023/01/28/07-46-19/","content":"<h1 id=\"Angularjs的工程化\"><a href=\"#Angularjs的工程化\" class=\"headerlink\" title=\"Angularjs的工程化\"></a>Angularjs的工程化</h1><h2 id=\"AMD规范和CMD规范\"><a href=\"#AMD规范和CMD规范\" class=\"headerlink\" title=\"AMD规范和CMD规范\"></a>AMD规范和CMD规范</h2><h3 id=\"为什么需要模块化管理工具\"><a href=\"#为什么需要模块化管理工具\" class=\"headerlink\" title=\"为什么需要模块化管理工具\"></a>为什么需要模块化管理工具</h3><p>在编写项目时可能需要加载很多js文件，若b.js依赖a.js，且a.js比b.js大很多，那么浏览器会让b.js等待a.js加载完毕后再去执行b.js里的内容；而即使d.js并不依赖a.js，b.js，c.js，也会等待这三个文件均加载完毕才执行，为了让浏览器能够按需加载，提出了模块化管理工具。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;js/a.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;js/b.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;js/c.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;js/d.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AMD规范\"><a href=\"#AMD规范\" class=\"headerlink\" title=\"AMD规范\"></a>AMD规范</h3><p>全称为Asynchronous Module Defined，即异步模块管理，它通过使用依赖注入等方法完整描述了模块的定义、依赖关系、引用关系以及加载机制，AngularJS、RequireJS均是符合AMD规范的。</p>\n<h4 id=\"define函数\"><a href=\"#define函数\" class=\"headerlink\" title=\"define函数\"></a>define函数</h4><p>函数中有三个参数，前两个参数可以省略，第三个参数是模块的具体实现本身。  当define函数执行时，它首先会异步调用第二个参数中列出的依赖模块，当所有的模块被载入完成之后，如果第三个参数是一个回调函数则执行，然后告诉系统模块可用，也通知了依赖于自己的模块自己已经可用。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([module-name?], [array-of-dependencies?], [module-factory-or-object]);</span><br><span class=\"line\"></span><br><span class=\"line\">其中：</span><br><span class=\"line\">module-name: 模块标识，可以省略。</span><br><span class=\"line\">array-of-dependencies: 所依赖的模块，可以省略。</span><br><span class=\"line\">module-factory-or-object: 模块的实现，或者一个JavaScript对象。</span><br></pre></td></tr></table></figure>\n\n<p>下面代码定义了一个alpha模块，并且依赖于内置的require，exports模块，以及外部的beta模块。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(&quot;alpha&quot;, [&quot;require&quot;, &quot;exports&quot;, &quot;beta&quot;], function (require, exports, beta) &#123;</span><br><span class=\"line\">    exports.verb = function() &#123;</span><br><span class=\"line\">    return beta.verb();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><h5 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h5><p>案例<br>│  test.html<br>│<br>└─js<br>    │  main.js<br>    │  math.js<br>    │  pi.js<br>    │<br>    └─lib<br>            require.js</p>\n<h5 id=\"项目代码\"><a href=\"#项目代码\" class=\"headerlink\" title=\"项目代码\"></a>项目代码</h5><h6 id=\"test-html\"><a href=\"#test-html\" class=\"headerlink\" title=\"test.html\"></a>test.html</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;RequireJS学习&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;script data-main=&quot;js/main.js&quot; src=&quot;js/lib/require.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;!-- main.js是主入口文件 --&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">requirejs.config(&#123;</span><br><span class=\"line\">\tbaseUrl: &#x27;js&#x27;,  //所有js程序的根目录</span><br><span class=\"line\">\tpaths: &#123;</span><br><span class=\"line\">\t\t//别名</span><br><span class=\"line\">\t\t&quot;math&quot;: &quot;math&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">requirejs([&quot;math&quot;],</span><br><span class=\"line\">\tfunction(math)&#123;</span><br><span class=\"line\">alert(math.squre(8));</span><br><span class=\"line\">alert(math.area(10));</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">alert(&quot;hello&quot;);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"math-js\"><a href=\"#math-js\" class=\"headerlink\" title=\"math.js\"></a>math.js</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">define([&quot;pi&quot;], function(pi)&#123;</span><br><span class=\"line\">\talert(&quot;我是math&quot;);</span><br><span class=\"line\">\treturn &#123;</span><br><span class=\"line\">\t\t&quot;squre&quot;: function(number)&#123;</span><br><span class=\"line\">\t\t\treturn number * number;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&quot;area&quot;: function(r)&#123;</span><br><span class=\"line\">\t\t\treturn pi.pi * r *r;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"pi-js\"><a href=\"#pi-js\" class=\"headerlink\" title=\"pi.js\"></a>pi.js</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(&#123;</span><br><span class=\"line\">\t&quot;pi&quot;: 3.1415926</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"项目说明\"><a href=\"#项目说明\" class=\"headerlink\" title=\"项目说明\"></a>项目说明</h5><ul>\n<li><p>在html文件中引包时需要同时指定require.js文件和main.js文件；</p>\n</li>\n<li><p>main.js是主入口文件，只有主入口main.js能用requirejs，其他入口只能用define；</p>\n</li>\n<li><p>math.js用define定义模块，模块暴露的API用return返回；</p>\n</li>\n<li><p>main.js中如果有语句不需要依赖别人的语句，可以不写在回调函数里面，而现在很少有机会不在回调函数中写语句，即AMD和CMD越来越像。</p>\n</li>\n</ul>\n<h3 id=\"CMD规范\"><a href=\"#CMD规范\" class=\"headerlink\" title=\"CMD规范\"></a>CMD规范</h3><p>全称为Common Module Defined，即普通模块管理，其执行过程是懒式的。NodeJS、SeaJS、CommonJS、webpack均是符合CMD规范的。</p>\n<h4 id=\"define函数-1\"><a href=\"#define函数-1\" class=\"headerlink\" title=\"define函数\"></a>define函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(function(require, exports, module) &#123;  </span><br><span class=\"line\">      // 模块定义在此  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"AngularJS的工程化\"><a href=\"#AngularJS的工程化\" class=\"headerlink\" title=\"AngularJS的工程化\"></a>AngularJS的工程化</h2><h3 id=\"angular-async-loader\"><a href=\"#angular-async-loader\" class=\"headerlink\" title=\"angular-async-loader\"></a>angular-async-loader</h3><p>angular-async-loader可以轻松解决ReuqireJS和AngularJS之间的粘合问题。<a href=\"https://github.com/subchen/angular-async-loader\">angular-async-loader官网</a></p>\n<h3 id=\"安装前端依赖\"><a href=\"#安装前端依赖\" class=\"headerlink\" title=\"安装前端依赖\"></a>安装前端依赖</h3><p>大体思路就是用RequireJS配置AngularJS项目，配置步骤如下。</p>\n<ul>\n<li><p>进入项目文件夹，在命令行窗口执行下列指令，创建bower前端依赖文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bower init</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建.bowerrc文件并进行配置（先创建一个空文档，再在命令行用rename重命名为.bowerrc），配置内容如下，配置后，用bower下载的模块会生成在assets文件夹下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;directory&quot; : &quot;assets&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装AngularJS。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bower install angular --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装ui-router。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bower install angular-ui-router --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装RequireJS。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bower install requirejs --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装angular-async-loader。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bower install angular-async-loader --save</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"书写三大文件\"><a href=\"#书写三大文件\" class=\"headerlink\" title=\"书写三大文件\"></a>书写三大文件</h3><p>三大文件为app-routes.js、app.js、bootstrap.js。</p>\n<p>在项目根目录下分别创建ngApp文件夹、app-routes.js、app.js、bootstrap.js、index.html文件。</p>\n<h4 id=\"bootstrap-js\"><a href=\"#bootstrap-js\" class=\"headerlink\" title=\"bootstrap.js\"></a>bootstrap.js</h4><p>bootstrap.js是RequireJS的入口文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">    baseUrl: &#x27;/&#x27;,</span><br><span class=\"line\">    //别名</span><br><span class=\"line\">    paths: &#123;</span><br><span class=\"line\">        &#x27;angular&#x27;: &#x27;assets/angular/angular.min&#x27;,</span><br><span class=\"line\">        &#x27;angular-ui-router&#x27;: &#x27;assets/angular-ui-router/release/angular-ui-router.min&#x27;,</span><br><span class=\"line\">        &#x27;angular-async-loader&#x27;: &#x27;assets/angular-async-loader/dist/angular-async-loader.min&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //声明paths中元素暴露的接口和依赖</span><br><span class=\"line\">    shim: &#123;</span><br><span class=\"line\">        &#x27;angular&#x27;: &#123;exports: &#x27;angular&#x27;&#125;,  //暴露的是angular</span><br><span class=\"line\">        &#x27;angular-ui-router&#x27;: &#123;deps: [&#x27;angular&#x27;]&#125;  //依赖的是angular</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//核心入口</span><br><span class=\"line\">require([&#x27;angular&#x27;, &#x27;./app-routes&#x27;], function (angular) &#123;</span><br><span class=\"line\">    //当整个文档就绪之后</span><br><span class=\"line\">    angular.element(document).ready(function () &#123;</span><br><span class=\"line\">        //angular.bootstrap是一个方法，表示启动angular</span><br><span class=\"line\">        angular.bootstrap(document, [&#x27;myapp&#x27;]);</span><br><span class=\"line\">        //通过类名添加ng-app指令，也可以通过attr来添加</span><br><span class=\"line\">        angular.element(document).find(&#x27;html&#x27;).addClass(&#x27;ng-app&#x27;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"app-js\"><a href=\"#app-js\" class=\"headerlink\" title=\"app.js\"></a>app.js</h4><p>app.js中创建了app对象。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(function (require, exports, module) &#123;</span><br><span class=\"line\">    //这是一个CMD规范的模块，模块的作用是向外暴露app整体</span><br><span class=\"line\">    //AMD只能向外暴露json形式的API</span><br><span class=\"line\"></span><br><span class=\"line\">    //引入依赖</span><br><span class=\"line\">    var angular = require(&#x27;angular&#x27;);</span><br><span class=\"line\">    var asyncLoader = require(&#x27;angular-async-loader&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">    require(&#x27;angular-ui-router&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //创建app对象，app对象依赖ui.router</span><br><span class=\"line\">    var app = angular.module(&#x27;app&#x27;, [&#x27;ui.router&#x27;]);</span><br><span class=\"line\"></span><br><span class=\"line\">    // initialze app module for angular-async-loader</span><br><span class=\"line\">    asyncLoader.configure(app);</span><br><span class=\"line\">    //向外暴露</span><br><span class=\"line\">    module.exports = app;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"app-routes-js\"><a href=\"#app-routes-js\" class=\"headerlink\" title=\"app-routes.js\"></a>app-routes.js</h4><p>app-routes.js中定义了路由，这里采用了连续依赖，bootstrap.js依赖app-routes.js，app-routes.js依赖app.js。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(function (require) &#123;</span><br><span class=\"line\">    //引入app对象</span><br><span class=\"line\">    var app = require(&#x27;./app&#x27;);</span><br><span class=\"line\">    //定义路由</span><br><span class=\"line\">    app.config([&#x27;$stateProvider&#x27;, &#x27;$urlRouterProvider&#x27;, function ($stateProvider, $urlRouterProvider) &#123;</span><br><span class=\"line\">        $urlRouterProvider.otherwise(&#x27;/home&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">        $stateProvider</span><br><span class=\"line\">            .state(&#x27;home&#x27;, &#123;</span><br><span class=\"line\">                url: &#x27;/home&#x27;,</span><br><span class=\"line\">                template: &#x27;&lt;h1&gt;我是首页！&lt;/h1&gt;&#x27;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h4><p>index.html是唯一的单页面，但不表示只存在一个html页面，其他页面可作为模板存在，在index.html文件中创建一个ui-view容器，然后用RequireJS语法引用入口文件bootstrap.js。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class=\"line\">\t&lt;title&gt;</span><br><span class=\"line\">\t\t测试系统</span><br><span class=\"line\">\t&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;ui-view&gt;&lt;/ui-view&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;assets/requirejs/require.js&quot; data-main=&quot;bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ngApp\"><a href=\"#ngApp\" class=\"headerlink\" title=\"ngApp\"></a>ngApp</h4><p>ngApp里可根据场景创建相应文件夹，存放编写控制器、服务和指令等内容的js文件。此处创建root文件夹和home文件夹。</p>\n<h5 id=\"root\"><a href=\"#root\" class=\"headerlink\" title=\"root\"></a>root</h5><h6 id=\"RootCtrl-js\"><a href=\"#RootCtrl-js\" class=\"headerlink\" title=\"RootCtrl.js\"></a>RootCtrl.js</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(function (require) &#123;</span><br><span class=\"line\">    var app = require(&#x27;app&#x27;);</span><br><span class=\"line\">    require(&#x27;./rootService&#x27;);</span><br><span class=\"line\">    // dynamic load services here or add into dependencies of ui-router state config</span><br><span class=\"line\">    // require(&#x27;../services/usersService&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">    app.controller(&#x27;RootCtrl&#x27;, [&#x27;$scope&#x27;, &#x27;rootService&#x27;, function ($scope, rootService) &#123;</span><br><span class=\"line\">        this.a = rootService.m;</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"rootService-js\"><a href=\"#rootService-js\" class=\"headerlink\" title=\"rootService.js\"></a>rootService.js</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(function (require) &#123;</span><br><span class=\"line\">    var app = require(&#x27;app&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // dynamic load services here or add into dependencies of ui-router state config</span><br><span class=\"line\">    // require(&#x27;../services/usersService&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">    app.factory(&quot;rootService&quot;, function () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            m : 9</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"template-html\"><a href=\"#template-html\" class=\"headerlink\" title=\"template.html\"></a>template.html</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;header&gt;</span><br><span class=\"line\">    &lt;h1&gt;我是root的template文件&lt;/h1&gt;</span><br><span class=\"line\">    &#123;&#123;rootCtrl.a&#125;&#125;</span><br><span class=\"line\">    &lt;nav&gt;</span><br><span class=\"line\">      &lt;a ui-sref=&quot;root.home&quot; ui-sref-active=&quot;cur&quot;&gt;首页&lt;/a&gt;</span><br><span class=\"line\">    &lt;/nav&gt;</span><br><span class=\"line\">  &lt;/header&gt;</span><br><span class=\"line\">  &lt;ui-view&gt; &lt;/ui-view&gt;</span><br><span class=\"line\">  &lt;footer&gt;我是footer&lt;/footer&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"home\"><a href=\"#home\" class=\"headerlink\" title=\"home\"></a>home</h4><h6 id=\"HomeCtrl-js\"><a href=\"#HomeCtrl-js\" class=\"headerlink\" title=\"HomeCtrl.js\"></a>HomeCtrl.js</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(function (require) &#123;</span><br><span class=\"line\">    var app = require(&#x27;app&#x27;);</span><br><span class=\"line\">    require(&#x27;jquery&#x27;);  //var $ = require(&#x27;jquery&#x27;);为什么不用变量接收，因为jquery的原理就是给window对象添加属性</span><br><span class=\"line\">    require(&#x27;jquery-ui&#x27;);</span><br><span class=\"line\">    app.controller(&#x27;HomeCtrl&#x27;, [function () &#123;</span><br><span class=\"line\">        this.a = 100;</span><br><span class=\"line\">        $(&#x27;.box&#x27;).animate(&#123; &#x27;font-size&#x27;: 100 &#125;, 1000, function () &#123;</span><br><span class=\"line\">            $(this).css(&quot;color&quot;, &quot;red&quot;);</span><br><span class=\"line\">            $(this).draggable();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"template-html-1\"><a href=\"#template-html-1\" class=\"headerlink\" title=\"template.html\"></a>template.html</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;h1&gt;我是首页。&#123;&#123;homeCtrl.a&#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot;&gt;你好&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jquery的引用\"><a href=\"#jquery的引用\" class=\"headerlink\" title=\"jquery的引用\"></a>jquery的引用</h3><h4 id=\"法一：\"><a href=\"#法一：\" class=\"headerlink\" title=\"法一：\"></a>法一：</h4><p>最简单的方法就是在index.html上引用，这样可以在全局上使用$函数，缺点是不管页面是否使用jquery，总是先会加载完毕。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class=\"line\">    &lt;title&gt;测试系统&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/root.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;ui-view&gt;&lt;/ui-view&gt;</span><br><span class=\"line\">    &lt;script</span><br><span class=\"line\">      type=&quot;text/javascript&quot;</span><br><span class=\"line\">      src=&quot;/assets/jquery/dist/jquery.min.js&quot;</span><br><span class=\"line\">    &gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script</span><br><span class=\"line\">      type=&quot;text/javascript&quot;</span><br><span class=\"line\">      src=&quot;/assets/requirejs/require.js&quot;</span><br><span class=\"line\">      data-main=&quot;bootstrap.js&quot;</span><br><span class=\"line\">    &gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"法二：\"><a href=\"#法二：\" class=\"headerlink\" title=\"法二：\"></a>法二：</h4><p>也可以在bootstrap.js上起一个别名，使用RequireJS加载jquery。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">    baseUrl: &#x27;/&#x27;,</span><br><span class=\"line\">    //别名</span><br><span class=\"line\">    paths: &#123;</span><br><span class=\"line\">        &#x27;angular&#x27;: &#x27;assets/angular/angular.min&#x27;,</span><br><span class=\"line\">        &#x27;angular-ui-router&#x27;: &#x27;assets/angular-ui-router/release/angular-ui-router.min&#x27;,</span><br><span class=\"line\">        &#x27;angular-async-loader&#x27;: &#x27;assets/angular-async-loader/dist/angular-async-loader.min&#x27;,</span><br><span class=\"line\">        &#x27;jquery&#x27;: &#x27;assets/jquery/dist/jquery.min&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //声明paths中元素暴露的接口和依赖</span><br><span class=\"line\">    shim: &#123;</span><br><span class=\"line\">        &#x27;angular&#x27;: &#123;exports: &#x27;angular&#x27;&#125;,  //暴露的是angular</span><br><span class=\"line\">        &#x27;angular-ui-router&#x27;: &#123; deps: [&#x27;angular&#x27;] &#125;,  //依赖的是angular</span><br><span class=\"line\">        &#x27;jquery&#x27;: &#123;exports: &#x27;jquery&#x27;&#125;  //暴露的是jquery</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后在需要使用jquery的控制器中写入如下代码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(function (require) &#123;</span><br><span class=\"line\">    var app = require(&#x27;app&#x27;);</span><br><span class=\"line\">    var jquery = require(&#x27;jquery&#x27;);</span><br><span class=\"line\">    app.controller(&#x27;HomeCtrl&#x27;, [function () &#123;</span><br><span class=\"line\">        jquery(&#x27;.box&#x27;).animate(&#123; &#x27;font-size&#x27;: 100 &#125;, 1000);</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>若要引入jquery的插件，需要bower下载jquery-ui，然后改变bootstrap.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">    baseUrl: &#x27;/&#x27;,</span><br><span class=\"line\">    //别名</span><br><span class=\"line\">    paths: &#123;</span><br><span class=\"line\">        &#x27;angular&#x27;: &#x27;assets/angular/angular.min&#x27;,</span><br><span class=\"line\">        &#x27;angular-ui-router&#x27;: &#x27;assets/angular-ui-router/release/angular-ui-router.min&#x27;,</span><br><span class=\"line\">        &#x27;angular-async-loader&#x27;: &#x27;assets/angular-async-loader/dist/angular-async-loader.min&#x27;,</span><br><span class=\"line\">        &#x27;jquery&#x27;: &#x27;assets/jquery/dist/jquery.min&#x27;,</span><br><span class=\"line\">        &#x27;jquery-ui&#x27;: &#x27;assets/jquery-ui/jquery-ui.min&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //声明paths中元素暴露的接口和依赖</span><br><span class=\"line\">    shim: &#123;</span><br><span class=\"line\">        &#x27;angular&#x27;: &#123;exports: &#x27;angular&#x27;&#125;,  //暴露的是angular</span><br><span class=\"line\">        &#x27;angular-ui-router&#x27;: &#123; deps: [&#x27;angular&#x27;] &#125;,  //依赖的是angular</span><br><span class=\"line\">        &#x27;jquery&#x27;: &#123;exports: &#x27;jquery&#x27;&#125;,  //暴露的是jquery</span><br><span class=\"line\">        &#x27;jquery-ui&#x27;: &#123; deps: [&#x27;jquery&#x27;] &#125;,  //依赖的是jquery</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在控制器中写入如下代码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">define(function (require) &#123;</span><br><span class=\"line\">    var app = require(&#x27;app&#x27;);</span><br><span class=\"line\">    var $ = require(&#x27;jquery&#x27;);</span><br><span class=\"line\">    require(&#x27;jquery-ui&#x27;);</span><br><span class=\"line\">    app.controller(&#x27;HomeCtrl&#x27;, [function () &#123;</span><br><span class=\"line\">        this.a = 100;</span><br><span class=\"line\">        $(&#x27;.box&#x27;).animate(&#123; &#x27;font-size&#x27;: 100 &#125;, 1000, function () &#123;</span><br><span class=\"line\">            $(this).css(&quot;color&quot;, &quot;red&quot;);</span><br><span class=\"line\">            $(this).draggable();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;]);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"项目结构-1\"><a href=\"#项目结构-1\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>项目<br>│  app-routes.js<br>│  app.js<br>│  bootstrap.js<br>│  index.html<br>│<br>├─assets<br>│  ├─angular<br>│  ├─angular-async-loader<br>│  ├─angular-ui-router<br>│  ├─jquery<br>│  ├─jquery-ui<br>│<br>├─css<br>│      root.css<br>│<br>└─ngApp<br>    ├─home<br>    │      HomeCtrl.js<br>    │      template.html<br>    │<br>    └─root<br>            RootCtrl.js<br>            rootService.js<br>            template.html</p>\n<p>注：在项目中使用ctrl+p，可以定位到目标文件。</p>\n<h2 id=\"结合nodejs做项目\"><a href=\"#结合nodejs做项目\" class=\"headerlink\" title=\"结合nodejs做项目\"></a>结合nodejs做项目</h2><p>前端MVVM架构，后端MVC架构（后端没有V了，不再使用ejs这种后端模板）。</p>\n<p>将AngularJS的层次放到www文件夹中，\t使用nodejs与express来跑静态路由，工作在3000端口。</p>\n","categories":["AngularJS"]},{"title":"Angularjs的重要概念","url":"/2023/01/27/22-08-22/","content":"<h1 id=\"AngularJS的重要概念\"><a href=\"#AngularJS的重要概念\" class=\"headerlink\" title=\"AngularJS的重要概念\"></a>AngularJS的重要概念</h1><h2 id=\"MVC模式\"><a href=\"#MVC模式\" class=\"headerlink\" title=\"MVC模式\"></a>MVC模式</h2><p>AngularJS最早按照MVC模式设计，在这种设计模式下，AngularJS组件可以分为：</p>\n<ul>\n<li><strong>M: Model，即模型</strong>，是应用程序中用于处理应用程序数据逻辑的部分，在AngularJS中: <ul>\n<li>即作用域对象(当前为$rootScope), 它可以包含一些属性或方法；</li>\n<li>充当储存数据的容器；</li>\n<li>提供操作数据的方法。</li>\n</ul>\n</li>\n<li><strong>V: View，即视图</strong>，是应用程序中用于处理数据显示的部分，在AngularJS中:<ul>\n<li>即HTML页面，AngularJS提供了一些指令来增强HTML标签的作用；</li>\n<li>包括: html&#x2F;css&#x2F;directive&#x2F;expression；</li>\n<li>可显示Model的数据；</li>\n<li>将数据同步到Model；</li>\n<li>可与用户交互。</li>\n</ul>\n</li>\n<li><strong>C: Controller，即控制器</strong>，是应用程序中处理用户交互的部分，在AngularJS中:<ul>\n<li>即AngularJS的Controller；</li>\n<li>可初始化Model数据；</li>\n<li>为Model添加行为方法。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"MVVM模式\"><a href=\"#MVVM模式\" class=\"headerlink\" title=\"MVVM模式\"></a>MVVM模式</h2><p>有另一种观点，将AngularJS视为MVVM模式。MVVM模式将“双向绑定”的思想作为核心，切断了View和Model之间的联系，View、Model完全通过ViewModel进行交互，而且Model和ViewModel之间的交互是双向的，因此视图的数据变化会同时引起数据源数据的变化，数据源数据的变化也会立即反映到视图上。MVVM模式和MVC模式最大的区别是：模型中的数据一旦变化，会自动影响视图，不需要控制器协调。</p>\n<ul>\n<li>M: Model, 即数据模型, 在AngularJS中:<ul>\n<li>为scope中的各个数据对象;</li>\n</ul>\n</li>\n<li>V: View, 即视图, 在AngularJS中:<ul>\n<li>为HTML页面;</li>\n</ul>\n</li>\n<li>VM: ViewModel, 即视图模型, 在AngularJS中:<ul>\n<li>为scope对象;</li>\n</ul>\n</li>\n<li>在AngularJS中controller不再是架构的核心，在MVVM中只是起辅助作用，用来辅助$scope对象，即VM层。</li>\n</ul>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><p>所谓的指令就是AngularJS对HTML的更改、补丁，其中ng是AngularJS的简写，也是内置指令的标记。</p>\n<h3 id=\"ng-app\"><a href=\"#ng-app\" class=\"headerlink\" title=\"ng-app\"></a>ng-app</h3><ul>\n<li><p>表示AngularJS操作的范围；</p>\n</li>\n<li><p>一个页面上仅能出现一个ng-app指令，若有多个ng-app指令，则后续的ng-app不工作；</p>\n</li>\n<li><p>ng-app若加在html标签上，则表示AngularJS控制了全页面，AngularJS会等待ng-app指令标签中的所有东西都加载后再执行，所以AngularJS的JavaScript文件在head或者body导入均可。</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html ng-app&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;hello world&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/angularjs/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &#123;&#123; 1 + 2 &#125;&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ng-init\"><a href=\"#ng-init\" class=\"headerlink\" title=\"ng-init\"></a>ng-init</h3><p>用于声明变量，该指令的属性值可声明一个或者多个变量，多个变量直接用逗号隔开即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div ng-init=&quot;num=5&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;num * num&#125;&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ng-bind\"><a href=\"#ng-bind\" class=\"headerlink\" title=\"ng-bind\"></a>ng-bind</h3><p>将表达式的值绑定到HTML元素上（如&lt;span..&#x2F;&gt;，&lt;div..&#x2F;&gt;等）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;p ng-bind=&quot;2 * 5&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ng-style\"><a href=\"#ng-style\" class=\"headerlink\" title=\"ng-style\"></a>ng-style</h3><p>表示给HTML元素加上样式，常见有如下三种写法。</p>\n<p>写法一：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div ng-style=&quot;&#123;background:red;&#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>写法二：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//...</span><br><span class=\"line\">myapp.controller(&quot;MainCtrl&quot;, [function()&#123;</span><br><span class=\"line\">    this.style = &#123;background:red;&#125;;</span><br><span class=\"line\">&#125;]);</span><br><span class=\"line\">//...</span><br><span class=\"line\">&lt;body ng-controller=&quot;MainCtrl as mainctrl&quot;&gt;</span><br><span class=\"line\">    &lt;div ng-style=&quot;mainctrl.style&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>写法三：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//...</span><br><span class=\"line\">myapp.controller(&quot;MainCtrl&quot;, [function()&#123;</span><br><span class=\"line\">    this.getStyle = function&#123;</span><br><span class=\"line\">        return &#123;background:red;&#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;]);</span><br><span class=\"line\">//...</span><br><span class=\"line\">&lt;body ng-controller=&quot;MainCtrl as mainctrl&quot;&gt;</span><br><span class=\"line\">    &lt;div ng-style=&quot;mainctrl.getStyle()&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意：如果控制器中的某一个值由其他值决定，并且希望其他值改变的时候，这个值也能改变，此时要写成函数return的形式。</p>\n<h3 id=\"ng-repeat\"><a href=\"#ng-repeat\" class=\"headerlink\" title=\"ng-repeat\"></a>ng-repeat</h3><p>表示重复一个HTML标签。</p>\n<p>语法格式为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div ng-repeat=&quot;变量名 in 数组数据&quot;&gt;&lt;/div&gt;  //变量将自动按顺序迭代数组数据中的每一项。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ng-options\"><a href=\"#ng-options\" class=\"headerlink\" title=\"ng-options\"></a>ng-options</h3><p>ng-options可以智能地从控制器中取值当做选项。注意，使用ng-options的下拉菜单必须有ng-model属性与控制器双向绑定。</p>\n<p>在下面select代码块中实现了下拉菜单的功能，option标签实现了下拉项，页面显示的是诸如“满意”之类的文字，存入数据库的是诸如“10”之类的value值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;select name=&quot;&quot; id=&quot;&quot;&gt;</span><br><span class=\"line\">    &lt;option value=&quot;10&quot;&gt;非常满意&lt;/option&gt;</span><br><span class=\"line\">    &lt;option value=&quot;8&quot;&gt;比较满意&lt;/option&gt;</span><br><span class=\"line\">    &lt;option value=&quot;6&quot;&gt;满意&lt;/option&gt;</span><br><span class=\"line\">    &lt;option value=&quot;4&quot;&gt;比较不满意&lt;/option&gt;</span><br><span class=\"line\">    &lt;option value=&quot;2&quot;&gt;稍微不满意&lt;/option&gt;</span><br><span class=\"line\">    &lt;option value=&quot;0&quot;&gt;非常不满意&lt;/option&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>ng-options常见的几种使用情形：</p>\n<ul>\n<li><p>普通数组，语法格式：label for value in array，value是提交的值，label是显示的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body ng-controller=&quot;MainCtrl as mainctrl&quot;&gt;</span><br><span class=\"line\">    &lt;select ng-model=&quot;mainctrl.label&quot; ng-options=&quot;item for item in mainctrl.arr&quot;&gt;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    \tvar app = angular.module(&#x27;myapp&#x27;, []);</span><br><span class=\"line\">    \tapp.controller(&#x27;MainCtrl&#x27;, [function()&#123;</span><br><span class=\"line\">    \t\tthis.label = &quot;东风&quot;;</span><br><span class=\"line\">    \t\tthis.arr = [&quot;东风&quot;, &quot;幺鸡&quot;, &quot;二饼&quot;, &quot;二条&quot;];</span><br><span class=\"line\">    \t&#125;])</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对象作为数组元素，语法格式：value as label for item in array，value是提交的值，label是显示的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body ng-controller=&quot;MainCtrl as mainctrl&quot;&gt;</span><br><span class=\"line\">    &lt;select ng-model=&quot;mainctrl.value&quot; ng-options=&quot;item.id as item.city for item in mainctrl.arr&quot;&gt;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    \tvar app = angular.module(&#x27;myapp&#x27;, []);</span><br><span class=\"line\">    \tapp.controller(&#x27;MainCtrl&#x27;, [function()&#123;</span><br><span class=\"line\">    \t\tthis.value = &quot;&quot;;</span><br><span class=\"line\">    \t\tthis.arr = [</span><br><span class=\"line\">    \t\t&#123;&quot;id&quot;: &quot;010&quot;, &quot;city&quot;: &quot;北京&quot;&#125;,</span><br><span class=\"line\">    \t\t&#123;&quot;id&quot;: &quot;029&quot;, &quot;city&quot;: &quot;西安&quot;&#125;,</span><br><span class=\"line\">    \t\t&#123;&quot;id&quot;: &quot;0311&quot;, &quot;city&quot;: &quot;石家庄&quot;&#125;,</span><br><span class=\"line\">    \t\t&#123;&quot;id&quot;: &quot;0312&quot;, &quot;city&quot;: &quot;保定&quot;&#125;];</span><br><span class=\"line\">    \t&#125;])</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>普通对象，语法格式value as label for (label, value) in array，value是提交的值，label是显示的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body ng-controller=&quot;MainCtrl as mainctrl&quot;&gt;</span><br><span class=\"line\">    &lt;select ng-model=&quot;mainctrl.value&quot; ng-options=&quot;value as key for (key, value) in mainctrl.arr&quot;&gt;</span><br><span class=\"line\">    &lt;/select&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    \tvar app = angular.module(&#x27;myapp&#x27;, []);</span><br><span class=\"line\">    \tapp.controller(&#x27;MainCtrl&#x27;, [function()&#123;</span><br><span class=\"line\">    \t\tthis.value = &quot;&quot;;</span><br><span class=\"line\">    \t\tthis.arr = &#123;</span><br><span class=\"line\">    \t\t&quot;广东&quot;:&quot;粤&quot;,</span><br><span class=\"line\">    \t\t&quot;福建&quot;:&quot;闽&quot;,</span><br><span class=\"line\">    \t\t&quot;江西&quot;:&quot;赣&quot;,</span><br><span class=\"line\">    \t\t&quot;山东&quot;:&quot;鲁&quot;,</span><br><span class=\"line\">    \t\t&quot;河北&quot;:&quot;冀&quot;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;])</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><p><code>&#123;&#123;&#125;&#125;</code>AngularJS的表达式模板定位符，主要用于在HTML页面上产生输出，里面可以填写AngularJS的表达式，表达式只能是简单运算，包括加、减、乘、除、求模、三目运算等，但不能是函数、循环、判断、赋值等复杂语句。</p>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><p>AngularJS的模块加载分为两种情况。</p>\n<ul>\n<li><p>匿名模块</p>\n<p>就是没有为ng-app指定属性值或属性值为空字符串），此时AngularJS可以自动加载并创建AngularJS模块。</p>\n</li>\n<li><p>命名模块</p>\n<p>为 ng-app 指定了属性值，该属性值就是该模块的名称），此时必须调用angular对象的module（）方法来创建AngularJS模块。</p>\n</li>\n</ul>\n<h2 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h2><ul>\n<li>AngularJS使用装饰者模式创建控制器，即首先创建一个对象，然后不断丰富对象的内容，React、Vue和Angular2都放弃了这种装饰者模式；</li>\n<li>控制器是一个对象，是我们View与Model之间的桥梁；</li>\n<li>当我们使用了ng-controller指令， 内部就会创建控制器对象；</li>\n<li>每定义一个ng-controller指令， 内部就会创建一个新的作用域对象（$scope）, 并自动注入构造函数中,在函数内部可以直接使用$scope对象；</li>\n<li>jQuery向外暴露了”$”这个底层变量；underscore向外暴露了”_”这个底层变量；AngularJS向外暴露了”angular”这个底层变量。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html ng-app=&quot;myapp&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;Angular程序&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/angularjs/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;!-- 实例化控制器MainCtrl类，并起一个别名mainctrl，控制器接管的范围为此div区域。 --&gt;</span><br><span class=\"line\">    &lt;div ng-controller=&quot;MainCtrl as mainctrl&quot;&gt;</span><br><span class=\"line\">    \t&lt;h1&gt;&#123;&#123;mainctrl.a&#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    \t&lt;input type=&quot;button&quot; value=&quot;点击&quot; ng-click=&quot;mainctrl.add()&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        //创建一个名为app的模块，第一个参数是ng-app的名称，第二个参数是一个数组，数组里存储该模块所需的依赖。</span><br><span class=\"line\">    \tvar app = angular.module(&#x27;myapp&#x27;, []);</span><br><span class=\"line\">    \t//创建一个名为MainCtrl的控制器类，第一个参数是控制器的名称，第二个参数是一个数组，描述依赖项和顺序注入到函数里面用的，数组最后一个元素是控制器的函数主程序。</span><br><span class=\"line\">    \tapp.controller(&#x27;MainCtrl&#x27;, [function()&#123;</span><br><span class=\"line\">    \t\t//定义一个变量a并赋值100。</span><br><span class=\"line\">    \t\tthis.a = 100;</span><br><span class=\"line\">    \t\t//做个备份。</span><br><span class=\"line\">    \t\tvar self = this;</span><br><span class=\"line\">            //定义一个方法。</span><br><span class=\"line\">    \t\tthis.add = function()&#123;</span><br><span class=\"line\">    \t\t\t//每运行一次自增1。</span><br><span class=\"line\">                self.a++;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;]);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><p>AngularJS只关心数据，数据的变化会自动引起视图的变化，并且视图是局部刷新，不是整个页面刷新，AngularJS会自动识别哪里用到了这个更新的数据，这个过程叫做脏检查。</p>\n<h3 id=\"数据绑定-1\"><a href=\"#数据绑定-1\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h3><p>数据从一个地方A转移(传递)到另一个地方B的过程称为数据绑定, 这个过程由框架来完成。</p>\n<ul>\n<li>View–&gt;Model；</li>\n<li>Model–&gt;View。</li>\n</ul>\n<h3 id=\"双向数据绑定\"><a href=\"#双向数据绑定\" class=\"headerlink\" title=\"双向数据绑定\"></a>双向数据绑定</h3><p>数据可以从View(视图层)流向Model（模型）, 也可以从Model流向View。</p>\n<ul>\n<li>Model&lt;–&gt;View：<ul>\n<li>当改变View中的数据, Model对象的对应属性也会随之改变:  ng-model指令  数据从View&#x3D;&#x3D;&gt;Model；</li>\n<li>当Model域对象的属性发生改变时, 页面对应数据随之更新:  <code>&#123;&#123;&#125;&#125;</code>表达式  数据从Model&#x3D;&#x3D;&gt;View。</li>\n</ul>\n</li>\n<li>ng-model是双向数据绑定, 而<code>&#123;&#123;&#125;&#125;</code>是单向数据绑定。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html ng-app=&quot;myapp&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;双向绑定&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/angularjs/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div ng-controller=&quot;MainCtrl as mainctrl&quot;&gt;</span><br><span class=\"line\">    \t&#123;&#123;mainctrl.a&#125;&#125;</span><br><span class=\"line\">    \t&lt;br/&gt;&lt;input type=&quot;text&quot; ng-model=&quot;mainctrl.a&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    \tvar app = angular.module(&#x27;myapp&#x27;, []);</span><br><span class=\"line\">    \tapp.controller(&#x27;MainCtrl&#x27;, [function()&#123;</span><br><span class=\"line\">    \t\tthis.a = 100;</span><br><span class=\"line\">    \t&#125;])</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"单向数据绑定\"><a href=\"#单向数据绑定\" class=\"headerlink\" title=\"单向数据绑定\"></a>单向数据绑定</h3><p>数据只能单方向流动。</p>\n<ul>\n<li>View–&gt;Model  ： ng-init；</li>\n<li>Model–&gt;View  : ；</li>\n<li>ng-init用来初始化当前的作用域变量。</li>\n</ul>\n<h2 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h2><p>依赖对象：完成某个特定的功能需要某个对象才能实现，这个对象就是依赖对象。</p>\n<p>依赖注入：依赖的对象以形参的形式被注入进来使用，这种方式就是依赖注入。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    function(event) &#123;</span><br><span class=\"line\">        alert(event.clientX);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上图所示代码块中，event对象就是以依赖注入的方式进来使用的依赖对象。</p>\n<p>AngularJS的 ‘$scope’对象就是依赖对象，并且是依赖注入的形式进行使用，这其中形参必须是特定的名称（‘$scope’）, 否则AngularJS无法注入，将抛出异常。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  function MyController($scope) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>AngularJS中如果要发出Ajax请求，此时需要使用内置$http服务，所有的内置服务都是$开头的，使用依赖注入的语法引入到控制器中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var app = angular.module(&#x27;myapp&#x27;, []);</span><br><span class=\"line\">    app.controller(&#x27;MainCtrl&#x27;, [&quot;$http&quot;, function($http)&#123;&#125;]);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h2><h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><h2 id=\"声明式编程和命令式编程\"><a href=\"#声明式编程和命令式编程\" class=\"headerlink\" title=\"声明式编程和命令式编程\"></a>声明式编程和命令式编程</h2><h3 id=\"命令式编程\"><a href=\"#命令式编程\" class=\"headerlink\" title=\"命令式编程\"></a>命令式编程</h3><p>命令“机器”如何去作事情(how)，这样无论你想要的是什么(what)，它都会按照你的命令实现，更注重执行的过程，可类比为解答题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4,5];</span><br><span class=\"line\">var newArr = [];</span><br><span class=\"line\">for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">  var num = arr[i]*2;</span><br><span class=\"line\">  newArr.push(num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(newArr);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"声明式编程\"><a href=\"#声明式编程\" class=\"headerlink\" title=\"声明式编程\"></a>声明式编程</h3><p> 告诉“机器”你想要的是什么(what)，让机器想出如何去作(how) ，更注重执行的结果，可类比为填空题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">var newArr2 = arr.map(function (item) &#123;</span><br><span class=\"line\">  return item*2;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(newArr2);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"案例集锦\"><a href=\"#案例集锦\" class=\"headerlink\" title=\"案例集锦\"></a>案例集锦</h2><h3 id=\"调色板\"><a href=\"#调色板\" class=\"headerlink\" title=\"调色板\"></a>调色板</h3><p>通过滑块和文本框改变色块颜色。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html ng-app=&quot;myapp&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;调色板&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .box&#123;</span><br><span class=\"line\">            width:200px;</span><br><span class=\"line\">            height:200px;</span><br><span class=\"line\">            border:1px solid #333;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/angularjs/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body ng-controller=&quot;MainCtrl as mainctrl&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box&quot; ng-style=&quot;mainctrl.getColor()&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">        r:</span><br><span class=\"line\">        &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;255&quot; ng-model=&quot;mainctrl.r&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;number&quot; min=&quot;0&quot; max=&quot;255&quot; ng-model=&quot;mainctrl.r&quot;&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">        g:</span><br><span class=\"line\">        &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;255&quot; ng-model=&quot;mainctrl.g&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;number&quot; min=&quot;0&quot; max=&quot;255&quot; ng-model=&quot;mainctrl.g&quot;&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">        b:</span><br><span class=\"line\">        &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;255&quot; ng-model=&quot;mainctrl.b&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;number&quot; min=&quot;0&quot; max=&quot;255&quot; ng-model=&quot;mainctrl.b&quot;&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">        a:</span><br><span class=\"line\">        &lt;input type=&quot;range&quot; min=&quot;0&quot; max=&quot;1&quot; step=&quot;0.01&quot; ng-model=&quot;mainctrl.a&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;number&quot; min=&quot;0&quot; max=&quot;1&quot; step=&quot;0.01&quot; ng-model=&quot;mainctrl.a&quot;&gt;</span><br><span class=\"line\">    &lt;/p&gt;  </span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        var app = angular.module(&quot;myapp&quot;, []);</span><br><span class=\"line\">        app.controller(&#x27;MainCtrl&#x27;, [function()&#123;</span><br><span class=\"line\">            this.r = 100;</span><br><span class=\"line\">            this.g = 100;</span><br><span class=\"line\">            this.b = 100;</span><br><span class=\"line\">            this.a = 0.38;</span><br><span class=\"line\">            this.getColor = function()&#123;</span><br><span class=\"line\">                return &#123;&quot;background-color&quot;:&quot;rgb(&quot; + this.r + &quot;,&quot; + this.g + &quot;,&quot; + this.b + &quot;,&quot; + this.a + &quot;)&quot;&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;]);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模拟微博发布框\"><a href=\"#模拟微博发布框\" class=\"headerlink\" title=\"模拟微博发布框\"></a>模拟微博发布框</h3><p>限制发送字数最多为140字，并且能够实时提醒用户写了多少个字，当超过140字时，数字变红，同时发布按钮无法点击。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html ng-app=&quot;myapp&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;模拟微博发布框&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/angularjs/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body ng-controller=&quot;MainCtrl as mainctrl&quot;&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">    \t&lt;textarea cols=&quot;30&quot; rows=&quot;10&quot; placeholder=&quot;请输入内容&quot; ng-model=&quot;mainctrl.txt&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">    \t&lt;span ng-style=&quot;mainctrl.getColor()&quot;&gt;&#123;&#123;mainctrl.txt.length&#125;&#125;/140字&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;</span><br><span class=\"line\">    \t&lt;input type=&quot;button&quot; value=&quot;发布&quot; ng-disabled=&quot;mainctrl.txt.length &gt; 140&quot;/&gt;</span><br><span class=\"line\">    \t&lt;input type=&quot;button&quot; value=&quot;清空&quot; ng-click=&quot;mainctrl.reset()&quot; ng-disabled=&quot;mainctrl.txt.length == 0&quot;/&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    \tvar app = angular.module(&#x27;myapp&#x27;, []);</span><br><span class=\"line\">    \tapp.controller(&#x27;MainCtrl&#x27;, [function()&#123;</span><br><span class=\"line\">    \t\tthis.txt = &quot;&quot;;</span><br><span class=\"line\">    \t\tvar self = this;</span><br><span class=\"line\">    \t\tthis.getColor = function()&#123;</span><br><span class=\"line\">                return self.txt.length &gt;= 140 ? &#123;&quot;color&quot;: &quot;red&quot;&#125; : &#123;&quot;color&quot;: &quot;#333&quot;&#125;;</span><br><span class=\"line\">    \t\t&#125;;</span><br><span class=\"line\">    \t\tthis.reset = function()&#123;</span><br><span class=\"line\">    \t\t\tself.txt = &quot;&quot;;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;]);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模拟表格\"><a href=\"#模拟表格\" class=\"headerlink\" title=\"模拟表格\"></a>模拟表格</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html ng-app=&quot;myapp&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;模拟表格&lt;/title&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class=\"line\">\t&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">\t    .table_wrap&#123;</span><br><span class=\"line\">\t    \twidth: 600px;</span><br><span class=\"line\">\t    \tmargin: 0 auto;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t\ttable, tr, td, th&#123;</span><br><span class=\"line\">\t\t\tborder-bottom: 1px solid #333;</span><br><span class=\"line\">\t\t\tborder-collapse: collapse;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tth&#123;</span><br><span class=\"line\">\t\t\tcursor: pointer;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tth, td&#123;</span><br><span class=\"line\">\t\t\twidth: 20%;</span><br><span class=\"line\">\t\t\tline-height: 150%;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttr:nth-child(2n)&#123;</span><br><span class=\"line\">\t\t\tbackground-color: #eee;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t.form_box&#123;</span><br><span class=\"line\">\t\t\tbackground-color: skyblue;</span><br><span class=\"line\">\t\t\tpadding: 10px;</span><br><span class=\"line\">\t\t\twidth: 400px;</span><br><span class=\"line\">\t\t\tmargin-top: 10px;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&lt;/style&gt;</span><br><span class=\"line\">\t&lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/angularjs/angular.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body ng-controller=&quot;MainCtrl as mainctrl&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;table_wrap&quot;&gt;</span><br><span class=\"line\">    \t&lt;table&gt;</span><br><span class=\"line\">\t    \t&lt;tr&gt;</span><br><span class=\"line\">\t    \t\t&lt;th ng-click=&quot;mainctrl.changeSort(&#x27;sid&#x27;)&quot;&gt;</span><br><span class=\"line\">\t    \t\t\t学号 </span><br><span class=\"line\">\t    \t\t\t&lt;span ng-show=&quot;mainctrl.sortBy == &#x27;sid&#x27;&quot;&gt;&#123;&#123;mainctrl.getSortSign()&#125;&#125;</span><br><span class=\"line\">\t    \t\t\t&lt;/span&gt;</span><br><span class=\"line\">\t    \t\t&lt;/th&gt;</span><br><span class=\"line\">\t    \t\t&lt;th ng-click=&quot;mainctrl.changeSort(&#x27;name&#x27;)&quot;&gt;</span><br><span class=\"line\">\t    \t\t\t姓名 </span><br><span class=\"line\">\t    \t\t\t&lt;span ng-show=&quot;mainctrl.sortBy == &#x27;name&#x27;&quot;&gt;&#123;&#123;mainctrl.getSortSign()&#125;&#125;</span><br><span class=\"line\">\t    \t\t\t&lt;/span&gt;</span><br><span class=\"line\">\t    \t\t&lt;/th&gt;</span><br><span class=\"line\">\t    \t\t&lt;th ng-click=&quot;mainctrl.changeSort(&#x27;Chinese&#x27;)&quot;&gt;</span><br><span class=\"line\">\t    \t\t\t语文成绩 </span><br><span class=\"line\">\t    \t\t\t&lt;span ng-show=&quot;mainctrl.sortBy == &#x27;Chinese&#x27;&quot;&gt;&#123;&#123;mainctrl.getSortSign()&#125;&#125;</span><br><span class=\"line\">\t    \t\t\t&lt;/span&gt;</span><br><span class=\"line\">\t    \t\t&lt;/th&gt;</span><br><span class=\"line\">\t    \t\t&lt;th ng-click=&quot;mainctrl.changeSort(&#x27;Math&#x27;)&quot;&gt;\t</span><br><span class=\"line\">\t    \t\t\t数学成绩 </span><br><span class=\"line\">\t    \t\t\t&lt;span ng-show=&quot;mainctrl.sortBy == &#x27;Math&#x27;&quot;&gt;&#123;&#123;mainctrl.getSortSign()&#125;&#125;</span><br><span class=\"line\">\t    \t\t\t&lt;/span&gt;</span><br><span class=\"line\">\t    \t\t&lt;/th&gt;</span><br><span class=\"line\">\t    \t\t&lt;th ng-click=&quot;mainctrl.changeSort(&#x27;English&#x27;)&quot;&gt;</span><br><span class=\"line\">\t    \t\t\t英语成绩 </span><br><span class=\"line\">\t    \t\t\t&lt;span ng-show=&quot;mainctrl.sortBy == &#x27;English&#x27;&quot;&gt;&#123;&#123;mainctrl.getSortSign()&#125;&#125;</span><br><span class=\"line\">\t    \t\t\t&lt;/span&gt;</span><br><span class=\"line\">\t    \t\t&lt;/th&gt;</span><br><span class=\"line\">\t    \t\t&lt;th&gt;删除&lt;/th&gt;</span><br><span class=\"line\">\t    \t&lt;/tr&gt;</span><br><span class=\"line\">\t    \t&lt;tr ng-repeat=&quot;item in mainctrl.data&quot;&gt;</span><br><span class=\"line\">\t    \t\t&lt;td&gt;&#123;&#123;item.sid&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">\t    \t\t&lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">\t    \t\t&lt;td&gt;&#123;&#123;item.Chinese&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">\t    \t\t&lt;td&gt;&#123;&#123;item.Math&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">\t    \t\t&lt;td&gt;&#123;&#123;item.English&#125;&#125;&lt;/td&gt;</span><br><span class=\"line\">\t    \t\t&lt;td&gt;&lt;input type=&quot;button&quot; value=&quot;删除&quot; ng-click=&quot;mainctrl.delete(item.sid)&quot;&gt;&lt;/td&gt;</span><br><span class=\"line\">\t    \t&lt;/tr&gt;</span><br><span class=\"line\">        &lt;/table&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;form_box&quot;&gt;  </span><br><span class=\"line\">    \t&lt;p&gt;</span><br><span class=\"line\">    \t\t学号：&lt;input type=&quot;text&quot; ng-model=&quot;mainctrl.form_obj.sid&quot;&gt;</span><br><span class=\"line\">    \t&lt;/p&gt;</span><br><span class=\"line\">    \t&lt;p&gt;</span><br><span class=\"line\">    \t\t姓名：&lt;input type=&quot;text&quot; ng-model=&quot;mainctrl.form_obj.name&quot;&gt;</span><br><span class=\"line\">    \t&lt;/p&gt;</span><br><span class=\"line\">    \t&lt;p&gt;</span><br><span class=\"line\">    \t\t语文：&lt;input type=&quot;text&quot; ng-model=&quot;mainctrl.form_obj.Chinese&quot;&gt;</span><br><span class=\"line\">    \t&lt;/p&gt;</span><br><span class=\"line\">    \t&lt;p&gt;</span><br><span class=\"line\">    \t\t数学：&lt;input type=&quot;text&quot; ng-model=&quot;mainctrl.form_obj.Math&quot;&gt;</span><br><span class=\"line\">    \t&lt;/p&gt;</span><br><span class=\"line\">    \t&lt;p&gt;</span><br><span class=\"line\">    \t\t英语：&lt;input type=&quot;text&quot; ng-model=&quot;mainctrl.form_obj.English&quot;&gt;</span><br><span class=\"line\">    \t&lt;/p&gt;</span><br><span class=\"line\">    \t&lt;p&gt;</span><br><span class=\"line\">    \t\t&lt;input type=&quot;button&quot; value=&quot;插入&quot; ng-click=&quot;mainctrl.add()&quot;&gt;</span><br><span class=\"line\">    \t&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    \tvar app = angular.module(&#x27;myapp&#x27;, []);</span><br><span class=\"line\">    \tapp.controller(&#x27;MainCtrl&#x27;, [function()&#123;</span><br><span class=\"line\">    \t\tthis.data = [</span><br><span class=\"line\">    \t\t    &#123;&quot;sid&quot;:1002, &quot;name&quot;:&quot;小黎&quot;, &quot;Chinese&quot;:102, &quot;Math&quot;:134, &quot;English&quot;:109&#125;,</span><br><span class=\"line\">    \t\t    &#123;&quot;sid&quot;:1003, &quot;name&quot;:&quot;小东&quot;, &quot;Chinese&quot;:112, &quot;Math&quot;:114, &quot;English&quot;:112&#125;,</span><br><span class=\"line\">    \t\t    &#123;&quot;sid&quot;:1004, &quot;name&quot;:&quot;小董&quot;, &quot;Chinese&quot;:132, &quot;Math&quot;:105, &quot;English&quot;:111&#125;,</span><br><span class=\"line\">    \t\t    &#123;&quot;sid&quot;:1005, &quot;name&quot;:&quot;小烈&quot;, &quot;Chinese&quot;:92, &quot;Math&quot;:134, &quot;English&quot;:144&#125;,</span><br><span class=\"line\">    \t\t]</span><br><span class=\"line\">    \t\t//表单对象，供双向数据绑定用的。AngularJS不能碰DOM，它改变的是数据，数据变化了，DOM自动变化。</span><br><span class=\"line\">    \t\tthis.form_obj = &#123;&#125;;</span><br><span class=\"line\">    \t\t//数据备份。</span><br><span class=\"line\">    \t\tvar self = this;</span><br><span class=\"line\">    \t\t//增加</span><br><span class=\"line\">    \t\tthis.add = function()&#123;</span><br><span class=\"line\">    \t\t\tself.data.push(self.form_obj);</span><br><span class=\"line\">    \t\t\tself.form_obj = &#123;&#125;;</span><br><span class=\"line\">    \t\t&#125;;</span><br><span class=\"line\">            //删除</span><br><span class=\"line\">    \t\tthis.delete = function(sid)&#123;</span><br><span class=\"line\">                for(var i = 0; i &lt; self.data.length; i++)&#123;</span><br><span class=\"line\">                \tif(self.data[i].sid == sid)&#123;</span><br><span class=\"line\">                \t\tself.data.splice(i, 1);</span><br><span class=\"line\">                \t&#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">    \t\t&#125;;</span><br><span class=\"line\">    \t\t//按谁排序</span><br><span class=\"line\">    \t\tthis.sortBy = &quot;sid&quot;;</span><br><span class=\"line\">    \t\t//升序还是降序,true表示升序</span><br><span class=\"line\">    \t\tthis.asc = true;</span><br><span class=\"line\">            </span><br><span class=\"line\">    \t\tthis.getSortSign = function()&#123;</span><br><span class=\"line\">                 return self.asc ? &quot;▼&quot; : &quot;▲&quot;;</span><br><span class=\"line\">    \t\t&#125;;</span><br><span class=\"line\">            //排序</span><br><span class=\"line\">            this.changeSort = function(key_name)&#123;</span><br><span class=\"line\">            \tif(key_name == self.sortBy)&#123;</span><br><span class=\"line\">            \t\tself.asc = !self.asc;</span><br><span class=\"line\">            \t&#125;else&#123;</span><br><span class=\"line\">                    self.sortBy = key_name;</span><br><span class=\"line\">                    self.asc = true;</span><br><span class=\"line\">            \t&#125;</span><br><span class=\"line\">            \tself.data.sort(function(a, b)&#123;</span><br><span class=\"line\">            \t\tif(a[self.sortBy] &gt; b[self.sortBy])&#123;</span><br><span class=\"line\">            \t\t\treturn self.asc ? 1 : -1;</span><br><span class=\"line\">            \t\t&#125;else&#123;</span><br><span class=\"line\">            \t\t\treturn self.asc ? -1 : 1;</span><br><span class=\"line\">            \t\t&#125;</span><br><span class=\"line\">            \t&#125;)</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">    \t&#125;]);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表单验证\"><a href=\"#表单验证\" class=\"headerlink\" title=\"表单验证\"></a>表单验证</h3><h4 id=\"两个条件\"><a href=\"#两个条件\" class=\"headerlink\" title=\"两个条件\"></a>两个条件</h4><ul>\n<li>需要验证的控件必须有ng-model属性；</li>\n<li>form必须有name属性。</li>\n</ul>\n<p>要想验证表单，必须符合上面两个条件；只要符合上面两个条件，表单就开始验证了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body ng-controller=&quot;MainCtrl as mainctrl&quot;&gt;</span><br><span class=\"line\">    &lt;form name=&quot;myform&quot;&gt;</span><br><span class=\"line\">    \t&lt;p&gt;</span><br><span class=\"line\">    \t\t姓名：&lt;input type=&quot;text&quot; required ng-model=&quot;mainctrl.formobj.name&quot;&gt;</span><br><span class=\"line\">    \t&lt;/p&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    \tvar app = angular.module(&#x27;myapp&#x27;, []);</span><br><span class=\"line\">    \tapp.controller(&#x27;MainCtrl&#x27;, [function()&#123;</span><br><span class=\"line\">    \t\tthis.formobj = &#123;&#125;;</span><br><span class=\"line\">    \t&#125;])</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html ng-app=&quot;myapp&quot;&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;表单验证&lt;/title&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">      body &#123;</span><br><span class=\"line\">        font-size: 16px;</span><br><span class=\"line\">        font-family: &quot;微软雅黑&quot;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      span &#123;</span><br><span class=\"line\">        font-size: 12px;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .passwordstrengthbar &#123;</span><br><span class=\"line\">        width: 100px;</span><br><span class=\"line\">        height: 20px;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .s1 &#123;</span><br><span class=\"line\">        background-color: red;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .s2 &#123;</span><br><span class=\"line\">        background-color: orange;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .s3 &#123;</span><br><span class=\"line\">        background-color: yellow;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .s4 &#123;</span><br><span class=\"line\">        background-color: lightseagreen;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .s5 &#123;</span><br><span class=\"line\">        background-color: green;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script</span><br><span class=\"line\">      type=&quot;text/javascript&quot;</span><br><span class=\"line\">      src=&quot;js/lib/angularjs/angular.min.js&quot;</span><br><span class=\"line\">    &gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body ng-controller=&quot;MainCtrl as mainctrl&quot;&gt;</span><br><span class=\"line\">    &#123;&#123;mainctrl.formobj&#125;&#125;</span><br><span class=\"line\">    &lt;form name=&quot;myform&quot;&gt;</span><br><span class=\"line\">      &lt;p&gt;</span><br><span class=\"line\">        *姓名：&lt;input</span><br><span class=\"line\">          type=&quot;text&quot;</span><br><span class=\"line\">          required</span><br><span class=\"line\">          name=&quot;name&quot;</span><br><span class=\"line\">          ng-model=&quot;mainctrl.formobj.name&quot;</span><br><span class=\"line\">          ng-pattern=&quot;/^([\\u4e00-\\u9fa5]&#123;2,20&#125;|[a-zA-Z.\\s]&#123;2,20&#125;)$/&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;span ng-show=&quot;myform.name.$dirty &amp;&amp; myform.name.$error.required&quot;</span><br><span class=\"line\">          &gt;请填写用户名&lt;/span</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">        &lt;span ng-show=&quot;myform.name.$error.pattern&quot;&gt;不合法的姓名&lt;/span&gt;</span><br><span class=\"line\">      &lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;</span><br><span class=\"line\">        *年龄：</span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=&quot;number&quot;</span><br><span class=\"line\">          name=&quot;age&quot;</span><br><span class=\"line\">          required</span><br><span class=\"line\">          ng-model=&quot;mainctrl.formobj.age&quot;</span><br><span class=\"line\">          min=&quot;7&quot;</span><br><span class=\"line\">          max=&quot;18&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;span ng-show=&quot;myform.age.$dirty &amp;&amp; myform.age.$error.required&quot;</span><br><span class=\"line\">          &gt;请填写年龄&lt;/span</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">        &lt;span ng-show=&quot;myform.age.$error.max&quot;&gt;最大为18岁&lt;/span&gt;</span><br><span class=\"line\">        &lt;span ng-show=&quot;myform.age.$error.min&quot;&gt;最小为7岁&lt;/span&gt;</span><br><span class=\"line\">      &lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;</span><br><span class=\"line\">        *密码：</span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=&quot;password&quot;</span><br><span class=\"line\">          name=&quot;password&quot;</span><br><span class=\"line\">          required</span><br><span class=\"line\">          ng-model=&quot;mainctrl.formobj.password&quot;</span><br><span class=\"line\">          ng-minlength=&quot;6&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;span</span><br><span class=\"line\">          ng-show=&quot;myform.password.$dirty &amp;&amp; myform.password.$error.required&quot;</span><br><span class=\"line\">          &gt;请填写密码&lt;/span</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">        &lt;span ng-show=&quot;myform.password.$error.minlength&quot;&gt;最短长度6位&lt;/span&gt;</span><br><span class=\"line\">        &lt;span ng-show=&quot;mainctrl.passwordScore &lt; 3&quot;&gt;密码强度不够&lt;/span&gt;</span><br><span class=\"line\">      &lt;/p&gt;</span><br><span class=\"line\">      &lt;p</span><br><span class=\"line\">        class=&quot;passwordstrengthbar&quot;</span><br><span class=\"line\">        class=&quot;s5&quot;</span><br><span class=\"line\">        ng-class=&quot;mainctrl.getStrengthClass()&quot;</span><br><span class=\"line\">        ng-show=&quot;myform.password.$valid&quot;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        &#123;&#123;mainctrl.passwordtip&#125;&#125;</span><br><span class=\"line\">      &lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;</span><br><span class=\"line\">        网址：</span><br><span class=\"line\">        &lt;input type=&quot;url&quot; name=&quot;url&quot; ng-model=&quot;mainctrl.formobj.url&quot; /&gt;</span><br><span class=\"line\">        &lt;span ng-show=&quot;myform.url.$error.url&quot;&gt;网址格式不正确&lt;/span&gt;</span><br><span class=\"line\">      &lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;</span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=&quot;button&quot;</span><br><span class=\"line\">          value=&quot;提交&quot;</span><br><span class=\"line\">          ng-disabled=&quot;myform.$invalid || mainctrl.passwordScore &lt; 3&quot;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">      &lt;/p&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">      var app = angular.module(&quot;myapp&quot;, []);</span><br><span class=\"line\">      function checkStrength(password) &#123;</span><br><span class=\"line\">        var lv = 0;</span><br><span class=\"line\">        if (!password) &#123;</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (password.match(/[a-z]/g)) &#123;</span><br><span class=\"line\">          lv++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (password.match(/[0-9]/g)) &#123;</span><br><span class=\"line\">          lv++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (password.match(/([A-Z])/g)) &#123;</span><br><span class=\"line\">          lv++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (password.match(/([\\!\\@\\#\\$\\%\\^\\&amp;\\*\\?\\/\\|\\\\])/g)) &#123;</span><br><span class=\"line\">          lv += 2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (password.length &lt; 6) &#123;</span><br><span class=\"line\">          lv = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (lv &gt; 5) &#123;</span><br><span class=\"line\">          lv = 5;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return lv;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      app.controller(&quot;MainCtrl&quot;, [</span><br><span class=\"line\">        function () &#123;</span><br><span class=\"line\">          this.formobj = &#123;&#125;;</span><br><span class=\"line\">          this.passwordtip = &quot;&quot;;</span><br><span class=\"line\">          this.getStrengthClass = function () &#123;</span><br><span class=\"line\">            this.passwordScore = checkStrength(this.formobj.password);</span><br><span class=\"line\">            console.log(this.passwordScore);</span><br><span class=\"line\">            if (this.passwordScore == 1) &#123;</span><br><span class=\"line\">              this.passwordtip = &quot;不安全&quot;;</span><br><span class=\"line\">            &#125; else if (this.passwordScore == 2) &#123;</span><br><span class=\"line\">              this.passwordtip = &quot;较不安全&quot;;</span><br><span class=\"line\">            &#125; else if (this.passwordScore == 3) &#123;</span><br><span class=\"line\">              this.passwordtip = &quot;安全&quot;;</span><br><span class=\"line\">            &#125; else if (this.passwordScore == 4) &#123;</span><br><span class=\"line\">              this.passwordtip = &quot;较安全&quot;;</span><br><span class=\"line\">            &#125; else if (this.passwordScore == 5) &#123;</span><br><span class=\"line\">              this.passwordtip = &quot;特别安全&quot;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return &quot;s&quot; + this.passwordScore;</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ]);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["AngularJS"]},{"title":"DBSCAN学习笔记","url":"/2023/02/10/15-31-44/","content":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><ul>\n<li><p>核心点：若某个点的密度达到算法设定的阈值，即ε-邻域内点的数量（包括自己）不小于minPts，则该点为核心点。</p>\n</li>\n<li><p>边界点：在ε-邻域内点的数量小于minPts，但是落在核心点邻域内的点。</p>\n</li>\n<li><p>噪声点：不属于任何一个簇的点，从任何一个核心点出发都是密度不可达的。</p>\n</li>\n<li><p>ε-邻域：设定的半径r。</p>\n</li>\n<li><p>直接密度可达：若某点p在点q的r邻域内，且q是核心点，则称p从q出发是直接密度可达的。</p>\n</li>\n<li><p>密度可达：若有一个点的序列q0、q1…qk，对任意q0-qi-qk是直接密度可达的，则称从q0到qk密度可达，这实际上是直接密度可达的传播。</p>\n</li>\n<li><p>密度相连：若从某核心点p出发，点q和点k都是密度可达的，则称点q和点k是密度相连的。</p>\n</li>\n</ul>\n<p>如果p是核心点，则它与所有由它可达的点（包括核心点和边界点）形成一个簇，每个簇拥有最少一个核心点，边界点也可以是簇的一部分，但它在簇的边缘位置，因为它不能到达更多的点。在DBSCAN里，簇可以理解为被低密度区域分隔开的稠密对象区域，DBSCAN将具有足够高密度的区域划分为簇，并在具有噪声的空间数据中发现任意形状的簇。</p>\n<h1 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h1><p>DBSCAN通过检查空间数据中每点的邻域来搜索簇。</p>\n<p>如果点p的邻域包含的点多于minPts，则创建一个以p为核心点的新簇，然后，DBSCAN迭代地聚集从这些核心点密度可达的对象，这个过程可能涉及一些密度可达簇的合并，当没有新的点可以添加到任何簇时，该过程结束。</p>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><ul>\n<li>根据ϵ寻找每个点的邻域，找出核心点；</li>\n<li>对于每一个核心点，如果这个核心点未被分配到某一个簇时，创建一个新的簇；</li>\n<li>寻找这个核心点所有邻域点，并循环寻找这些邻域点相应的邻域点，将所有这些点分配到同一个簇；</li>\n<li>重复以上三步，直到左右核心点都被分配。对于不属于任何簇的点即为噪声点。</li>\n</ul>\n<h2 id=\"参数选择\"><a href=\"#参数选择\" class=\"headerlink\" title=\"参数选择\"></a>参数选择</h2><p>半径r：根据k距离来设定。</p>\n<p>首先选中一个点，计算它和所有其它点的距离，从小到大排序为d1、d2、d3…，假如d3和d4之间的差异很大，就可以认为d1到d3之间的距离是合适的，将其设为半径。</p>\n<p>minPts：一般可通过多次尝试设置。</p>\n<h1 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h1><h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li><p>不需要指定簇个数；</p>\n</li>\n<li><p>可以发现任意形状的簇；</p>\n</li>\n<li><p>擅长找到离群点（检测任务）；</p>\n</li>\n<li><p>仅需两个参数。</p>\n</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li><p>不适用于高维数据；</p>\n</li>\n<li><p>参数对结果影响非常大；</p>\n</li>\n<li><p>sklearn中效率很慢（可以应用数据削减策略）。</p>\n</li>\n</ul>\n<h1 id=\"算法可视化演示\"><a href=\"#算法可视化演示\" class=\"headerlink\" title=\"算法可视化演示\"></a>算法可视化演示</h1><p><a href=\"https://www.naftaliharris.com/blog/visualizing-dbscan-clustering/\">DBSCAN的可视化演示</a></p>\n","categories":["机器学习"]},{"title":"在Flask中构建API接口的相关概念","url":"/2023/02/01/16-10-02/","content":"<h1 id=\"在Flask中构建API接口的相关概念\"><a href=\"#在Flask中构建API接口的相关概念\" class=\"headerlink\" title=\"在Flask中构建API接口的相关概念\"></a>在Flask中构建API接口的相关概念</h1><h2 id=\"重定向行为\"><a href=\"#重定向行为\" class=\"headerlink\" title=\"重定向行为\"></a>重定向行为</h2><h3 id=\"斜杠\"><a href=\"#斜杠\" class=\"headerlink\" title=\"斜杠\"></a>斜杠</h3><p>以下两个路由的不同之处在于是否使用尾部的斜杠。</p>\n<p>第一个路由的URL尾部有一个斜杠，看起来就像一个文件夹，访问一个没有斜杠结尾的URL时，Flask会自动进行重定向，在结尾加上一个斜杠。</p>\n<p>第二个路由的URL没有尾部斜杠，因此其行为表现与一个文件类似，如果访问这个URL时添加了尾部斜杠就会得到一个404错误，这样可以保持URL唯一，并帮助搜索引擎避免重复索引同一页面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@app.route(&#x27;/home/&#x27;)</span><br><span class=\"line\">def hello_world():</span><br><span class=\"line\">    return &#x27;Hello World!&#x27;</span><br><span class=\"line\">    </span><br><span class=\"line\">@app.route(&#x27;/home&#x27;)</span><br><span class=\"line\">def hello_world():</span><br><span class=\"line\">    return &#x27;Hello World!&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"redirect\"><a href=\"#redirect\" class=\"headerlink\" title=\"redirect\"></a>redirect</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, redirect</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/baidu&#x27;)</span><br><span class=\"line\">def baidu():</span><br><span class=\"line\">    return redirect(&#x27;https://www.baidu.com&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flask-HTTP方法\"><a href=\"#Flask-HTTP方法\" class=\"headerlink\" title=\"Flask HTTP方法\"></a>Flask HTTP方法</h2><table>\n<thead>\n<tr>\n<th>1</th>\n<th>GET</th>\n<th>请求指定的页面信息，并返回实体主体。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2</td>\n<td>POST</td>\n<td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>PUT</td>\n<td>从客户端向服务器传送的数据取代指定的文档的内容。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>DELETE</td>\n<td>请求服务器删除指定的页面。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@app.route(&#x27;/login&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class=\"line\">def login():</span><br><span class=\"line\">    if request.method == &#x27;POST&#x27;:</span><br><span class=\"line\">        return do_the_login()</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return show_the_login_form()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"登录登出案例\"><a href=\"#登录登出案例\" class=\"headerlink\" title=\"登录登出案例\"></a>登录登出案例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 登录</span><br><span class=\"line\">@app.route(&quot;/login&quot;, methods=[&#x27;POST&#x27;])</span><br><span class=\"line\">def login():</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    username: 123456</span><br><span class=\"line\">    password: 123456</span><br><span class=\"line\">    :return:</span><br><span class=\"line\">    &quot;&quot;&quot;</span><br><span class=\"line\">    get_data = request.get_json()</span><br><span class=\"line\">    username = get_data.get(&quot;username&quot;)</span><br><span class=\"line\">    password = get_data.get(&quot;password&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    if not all([username, password]):</span><br><span class=\"line\">        return jsonify(msg=&quot;参数不完整&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    if username == &#x27;123456&#x27; and password == &#x27;123456&#x27;:</span><br><span class=\"line\">        # 如果验证通过，保存登录状态在session中</span><br><span class=\"line\">        session[&#x27;username&#x27;] = username</span><br><span class=\"line\">        return jsonify(msg=&#x27;登录成功&#x27;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return jsonify(msg=&#x27;账号或密码错误&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 检查登录状态</span><br><span class=\"line\">@app.route(&quot;/session&quot;, methods=[&quot;GET&quot;])</span><br><span class=\"line\">def check_session():</span><br><span class=\"line\">    username = session.get(&quot;username&quot;)</span><br><span class=\"line\">    if username is not None:</span><br><span class=\"line\">        return jsonify(username=username)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return jsonify(msg=&quot;出错了，没登录&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># 登出</span><br><span class=\"line\">@app.route(&#x27;/logout&#x27;, methods=[&#x27;GET&#x27;])</span><br><span class=\"line\">def logout():</span><br><span class=\"line\">    session.clear()</span><br><span class=\"line\">    return jsonify(msg=&#x27;成功退出登录&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><p>要访问cookie，可以使用cookie属性，通过使用响应对象的set_cookie方法来设置cookie。请求对象的cookie属性是一个包含了客户端传输的所有cookie的字典。在Flask中，如果使用session，就不要直接使用cookie，因为session比较安全一些。</p>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><p>session 是基于cookie实现， 保存在服务端的键值对（形式为 {随机字符串：‘xxxxxx’}）, 同时在浏览器中的cookie中也对应一相同的随机字符串，用来再次请求的 时候验证。</p>\n<h3 id=\"一、配置SECRET-KEY\"><a href=\"#一、配置SECRET-KEY\" class=\"headerlink\" title=\"一、配置SECRET_KEY\"></a>一、配置SECRET_KEY</h3><p>因为flask的session是通过加密之后放到了cookie中，所以需要配置“SECRET_KEY”。</p>\n<h4 id=\"配置方法\"><a href=\"#配置方法\" class=\"headerlink\" title=\"配置方法\"></a>配置方法</h4><p>新建一个config.py的文件配置secret_key</p>\n<p>config.py</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SECRET_KEY = <span class=\"string\">&#x27;XXXXXXXXX&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在主运行文件里面添加config文件里面的内容。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> <span class=\"title class_\">Flask</span>,session</span><br><span class=\"line\"><span class=\"keyword\">import</span> config</span><br><span class=\"line\">app = <span class=\"title class_\">Flask</span>(__name__)</span><br><span class=\"line\">app.<span class=\"property\">config</span>[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = config.<span class=\"property\">SECRET_KEY</span>  # 写法一</span><br><span class=\"line\">app.<span class=\"property\">secret_key</span> = config.<span class=\"property\">SECRET_KEY</span>  # 写法二</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、操作session\"><a href=\"#二、操作session\" class=\"headerlink\" title=\"二、操作session\"></a>二、操作session</h3><p>操作session的方法就如同操作字典。</p>\n<h4 id=\"设置session\"><a href=\"#设置session\" class=\"headerlink\" title=\"设置session\"></a>设置session</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置session</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set</span>():</span><br><span class=\"line\">     session[<span class=\"string\">&#x27;name&#x27;</span>] = <span class=\"string\">&#x27;lili&#x27;</span> <span class=\"comment\"># 设置“字典”键值对</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">&#x27;success&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"读取session\"><a href=\"#读取session\" class=\"headerlink\" title=\"读取session\"></a>读取session</h4><p>因为session就像字典一样所以，操作它的时候有两种方法：</p>\n<ul>\n<li>（1）result &#x3D; session[‘key’] ：如果内容不存在，将会报异常。</li>\n<li>（2）result &#x3D; session.get(‘key’) ：如果内容不存在，将返回None（推荐用法）。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 读取session</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/get&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get</span>():</span><br><span class=\"line\">    session[<span class=\"string\">&#x27;name&#x27;</span>]  <span class=\"comment\"># 写法一</span></span><br><span class=\"line\">    session.get(<span class=\"string\">&#x27;name&#x27;</span>)  <span class=\"comment\"># 写法二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;success&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除session\"><a href=\"#删除session\" class=\"headerlink\" title=\"删除session\"></a>删除session</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除session</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/delete/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">delete</span>():</span><br><span class=\"line\">    session.pop(<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"literal\">None</span>)  <span class=\"comment\"># 写法一</span></span><br><span class=\"line\">    session[<span class=\"string\">&#x27;name&#x27;</span>] = <span class=\"literal\">False</span>  <span class=\"comment\"># 写法二</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;success&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"清除session中所有数据\"><a href=\"#清除session中所有数据\" class=\"headerlink\" title=\"清除session中所有数据\"></a>清除session中所有数据</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清除session中所有数据</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/clear&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">clear</span>():</span><br><span class=\"line\">    session.clear()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;success&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、设置session的过期时间\"><a href=\"#三、设置session的过期时间\" class=\"headerlink\" title=\"三、设置session的过期时间\"></a>三、设置session的过期时间</h3><p>若没有指定session的过期时间，那么默认是浏览器关闭后就自动结束。<code>session.permanent = True</code>语句在flask下则可以将有效期延长至一个月。</p>\n<h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置session</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set</span>():</span><br><span class=\"line\">    session[<span class=\"string\">&#x27;name&#x27;</span>] = <span class=\"string\">&#x27;lili&#x27;</span></span><br><span class=\"line\">    session.permanent = <span class=\"literal\">True</span> <span class=\"comment\"># 长期有效，一个月的时间有效</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;success&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><ul>\n<li>1.引入包：<code>from datetime import timedelta</code></li>\n<li>2.配置有效期限：<code>app.config[&#39;PERMANENT_SESSION_LIFETIME&#39;] = timedelta(days=7) # 配置7天有效</code></li>\n<li>3.设置：<code>session.permanent = True</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#encoding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask,session</span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> timedelta</span><br><span class=\"line\"><span class=\"keyword\">import</span> os </span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class=\"number\">24</span>)</span><br><span class=\"line\">app.config[<span class=\"string\">&#x27;PERMANENT_SESSION_LIFETIME&#x27;</span>] = timedelta(days=<span class=\"number\">7</span>) <span class=\"comment\"># 配置7天有效 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置session</span></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set</span>():</span><br><span class=\"line\">    session[<span class=\"string\">&#x27;username&#x27;</span>] = <span class=\"string\">&#x27;liefyuan&#x27;</span></span><br><span class=\"line\">    session.permanent = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;success&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Postman\"><a href=\"#Postman\" class=\"headerlink\" title=\"Postman\"></a>Postman</h2><p>在构建API接口时，可以使用Postman工具来进行接口测试。</p>\n<h3 id=\"Postman界面导航\"><a href=\"#Postman界面导航\" class=\"headerlink\" title=\"Postman界面导航\"></a>Postman界面导航</h3><p> <img src=\"/2023/02/01/16-10-02/01.png\" alt=\"01.png\"> </p>\n<blockquote>\n</blockquote>\n","categories":["Flask"]},{"title":"RNN的PyTorch实现","url":"/2022/11/18/22-17-53/","content":"<h1 id=\"官方实现\"><a href=\"#官方实现\" class=\"headerlink\" title=\"官方实现\"></a>官方实现</h1><p>PyTorch已经实现了一个RNN类，就在torch.nn工具包中，通过torch.nn.RNN调用。</p>\n<p>使用步骤：</p>\n<ol>\n<li>实例化类；</li>\n<li>将输入层向量和隐藏层向量初始状态值传给实例化后的对象，获得RNN的输出。</li>\n</ol>\n<p>在实例化该类时，需要传入如下属性：</p>\n<ul>\n<li>input_size：输入层神经元个数；</li>\n<li>hidden_size：每层隐藏层的神经元个数；</li>\n<li>num_layers：隐藏层层数，默认设置为1层；</li>\n<li>nonlinearity：激活函数的选择，可选是’tanh’或者’relu’，默认设置为’tanh’；</li>\n<li>bias：偏置系数，可选是’True’或者’False’，默认设置为’True’；</li>\n<li>batch_first：可选是’True’或者’False’，默认设置为’False’；</li>\n<li>dropout：默认设置为0。若为非0，将在除最后一层的每层RNN输出上引入Dropout层，dropout概率就是该非零值；</li>\n<li>bidirectional：默认设置为False。若为True，即为双向RNN。</li>\n</ul>\n<p>RNN的输入有两个，一个是input，一个是h<sub>0</sub>。input就是输入层向量，h<sub>0</sub>就是隐藏层初始状态值。<br>若没有采用批量输入，则输入层向量的形状为(L, H<sub>in</sub>)；<br>若采用批量输入，且batch_first为False，则输入层向量的形状为(L, N, H<sub>in</sub>)；<br>若采用批量输入，且batch_first为True，则输入层向量的形状为(N, L, H<sub>in</sub>)；<br>对于(N, L, H<sub>in</sub>)，在文本输入时，可以按顺序理解为(每次输入几句话，每句话有几个字，每个字由多少维的向量表示)。</p>\n<p>若没有采用批量输入，则隐藏层向量的形状为(D * num_layers, H<sub>out</sub>)；<br>若采用批量输入，则隐藏层向量的形状为(D * num_layers, N, H<sub>out</sub>)；<br>注意，batch_first的设置对隐藏层向量的形状不起作用。</p>\n<p>RNN的输出有两个，一个是output，一个是h<sub>n</sub>。output包含了每个时间步最后一层的隐藏层状态，h<sub>n</sub>包含了最后一个时间步每层的隐藏层状态。<br>若没有采用批量输入，则输出层向量的形状为(L, D * H<sub>out</sub>)；<br>若采用批量输入，且batch_first为False，则输出层向量的形状为(L, N, D * H<sub>out</sub>)；<br>若采用批量输入，且batch_first为True，则输出层向量的形状为(N, L, D * H<sub>out</sub>)。</p>\n<p>参数解释：</p>\n<ul>\n<li>N代表的是批量大小；</li>\n<li>L代表的是输入的序列长度；</li>\n<li>若是双向RNN，则D的值为2；若是单向RNN，则D的值为1；</li>\n<li>H<sub>in</sub>在数值上是输入层神经元个数；</li>\n<li>H<sub>out</sub>在数值上是隐藏层神经元个数。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\">rnn = nn.RNN(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">1</span>, batch_first=<span class=\"literal\">True</span>)  <span class=\"comment\"># 实例化一个单向单层RNN</span></span><br><span class=\"line\"><span class=\"built_in\">input</span> = torch.randn(<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">h0 = torch.randn(<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">output, hn = rnn(<span class=\"built_in\">input</span>, h0)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"手写复现\"><a href=\"#手写复现\" class=\"headerlink\" title=\"手写复现\"></a>手写复现</h1><h2 id=\"复现代码\"><a href=\"#复现代码\" class=\"headerlink\" title=\"复现代码\"></a>复现代码</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.nn <span class=\"keyword\">as</span> nn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyRNN</span>(nn.Module):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, input_size, hidden_size</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self.input_size = input_size</span><br><span class=\"line\">        self.hidden_size = hidden_size</span><br><span class=\"line\">        self.weight_ih = torch.randn(self.hidden_size, self.input_size) * <span class=\"number\">0.01</span></span><br><span class=\"line\">        self.weight_hh = torch.randn(self.hidden_size, self.hidden_size) * <span class=\"number\">0.01</span></span><br><span class=\"line\">        self.bias_ih = torch.randn(self.hidden_size)</span><br><span class=\"line\">        self.bias_hh = torch.randn(self.hidden_size)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, <span class=\"built_in\">input</span>, h0</span>):</span><br><span class=\"line\">        N, L, input_size = <span class=\"built_in\">input</span>.shape</span><br><span class=\"line\">        output = torch.zeros(N, L, self.hidden_size)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(L):</span><br><span class=\"line\">            x = <span class=\"built_in\">input</span>[:, t, :].unsqueeze(<span class=\"number\">2</span>)  <span class=\"comment\"># 获得当前时刻的输入特征，[N, input_size, 1]。unsqueeze(n)，在第n维上增加一维</span></span><br><span class=\"line\">            w_ih_batch = self.weight_ih.unsqueeze(<span class=\"number\">0</span>).tile(N, <span class=\"number\">1</span>, <span class=\"number\">1</span>)  <span class=\"comment\"># [N, hidden_size, input_size]</span></span><br><span class=\"line\">            w_hh_batch = self.weight_hh.unsqueeze(<span class=\"number\">0</span>).tile(N, <span class=\"number\">1</span>, <span class=\"number\">1</span>)  <span class=\"comment\"># [N, hidden_size, hidden_size]</span></span><br><span class=\"line\">            w_times_x = torch.bmm(w_ih_batch, x).squeeze(-<span class=\"number\">1</span>)  <span class=\"comment\"># [N, hidden_size]。squeeze(n)，在第n维上减小一维</span></span><br><span class=\"line\">            w_times_h = torch.bmm(w_hh_batch, h0.unsqueeze(<span class=\"number\">2</span>)).squeeze(-<span class=\"number\">1</span>)  <span class=\"comment\"># [N, hidden_size]</span></span><br><span class=\"line\">            h0 = torch.tanh(w_times_x + self.bias_ih  + w_times_h + self.bias_hh)</span><br><span class=\"line\">            output[:, t, :] = h0</span><br><span class=\"line\">        <span class=\"keyword\">return</span> output, h0.unsqueeze(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证正确性\"><a href=\"#验证正确性\" class=\"headerlink\" title=\"验证正确性\"></a>验证正确性</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">my_rnn = MyRNN(<span class=\"number\">10</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"built_in\">input</span> = torch.randn(<span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">h0 = torch.randn(<span class=\"number\">5</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">my_output, my_hn = my_rnn(<span class=\"built_in\">input</span>, h0)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(output.shape == my_output.shape, hn.shape == my_hn.shape)</span><br></pre></td></tr></table></figure>\n\n<pre><code>True True\n</code></pre>\n<h1 id=\"主要参考\"><a href=\"#主要参考\" class=\"headerlink\" title=\"主要参考\"></a>主要参考</h1><p><a href=\"https://pytorch.org/docs/stable/generated/torch.nn.RNN.html#torch.nn.RNN\">官方说明文档</a></p>\n","categories":["NLP"]},{"title":"如何在Python中的子进程获取键盘输入","url":"/2022/11/25/10-58-00/","content":"<p>场景：在Python中使用multiprocessing模块的Process创建子进程，试图在子进程中获取键盘输入。</p>\n<h1 id=\"使用input\"><a href=\"#使用input\" class=\"headerlink\" title=\"使用input()\"></a>使用input()</h1><p>在子进程中使用input（）会弹出报错信息：EOFError: EOF when reading a line。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_input</span>():</span><br><span class=\"line\">    info = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start print info!&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(info)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start progress!&quot;</span>)</span><br><span class=\"line\">    Process(target=test_input).start()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果输出\"><a href=\"#结果输出\" class=\"headerlink\" title=\"结果输出\"></a>结果输出</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">start progress!</span><br><span class=\"line\">Process Process-1:</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;D:\\software\\Python\\lib\\multiprocessing\\process.py&quot;, line 258, in _bootstrap</span><br><span class=\"line\">    self.run()</span><br><span class=\"line\">  File &quot;D:\\software\\Python\\lib\\multiprocessing\\process.py&quot;, line 93, in run</span><br><span class=\"line\">    self._target(*self._args, **self._kwargs)</span><br><span class=\"line\">  File &quot;D:\\text_project\\python\\验收2\\test.py&quot;, line 5, in test_input</span><br><span class=\"line\">    info = input()</span><br><span class=\"line\">EOFError: EOF when reading a line</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用sys-stdin-readline\"><a href=\"#使用sys-stdin-readline\" class=\"headerlink\" title=\"使用sys.stdin.readline()\"></a>使用sys.stdin.readline()</h1><p>在子进程中使用sys.stdin.readline()，发现并不会等待键盘输入。</p>\n<h2 id=\"代码示例-1\"><a href=\"#代码示例-1\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_input</span>():</span><br><span class=\"line\">    info = sys.stdin.readline()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start print info!&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(info)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start progress!&quot;</span>)</span><br><span class=\"line\">    Process(target=test_input).start()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果输出-1\"><a href=\"#结果输出-1\" class=\"headerlink\" title=\"结果输出\"></a>结果输出</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">start progress!</span><br><span class=\"line\">start print info!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用fn-x3D-sys-stdin-fileno\"><a href=\"#使用fn-x3D-sys-stdin-fileno\" class=\"headerlink\" title=\"使用fn&#x3D;sys.stdin.fileno()\"></a>使用fn&#x3D;sys.stdin.fileno()</h1><p>在主进程中敲写代码fn&#x3D;sys.stdin.fileno()，然后将获取到的文件描述符fn传入子进程，子进程敲写代码sys.stdin &#x3D; os.fdopen(fn)，然后就可以正常使用sys.stdin.readline()获取键盘输入了。</p>\n<h2 id=\"代码示例-2\"><a href=\"#代码示例-2\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_input</span>(<span class=\"params\">fn</span>):</span><br><span class=\"line\">    sys.stdin = os.fdopen(fn)</span><br><span class=\"line\">    info = sys.stdin.readline()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start print info!&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(info)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start progress!&quot;</span>)</span><br><span class=\"line\">    fn = sys.stdin.fileno()</span><br><span class=\"line\">    Process(target=test_input, args=(fn, )).start()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果输出-2\"><a href=\"#结果输出-2\" class=\"headerlink\" title=\"结果输出\"></a>结果输出</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">start progress!</span><br><span class=\"line\">this is my input.</span><br><span class=\"line\">start print info!</span><br><span class=\"line\">this is my input.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>","categories":["疑难杂症"]},{"title":"通过GitHub和阿里云自定义域名实现https认证","url":"/2022/12/20/20-21-49/","content":"<h1 id=\"在GitHub中的操作\"><a href=\"#在GitHub中的操作\" class=\"headerlink\" title=\"在GitHub中的操作\"></a>在GitHub中的操作</h1><p>登录GitHub， 点击“Your repositories”，进入个人仓库页面；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/GitHub1.png\" alt=\"GitHub1\"></p>\n<p>点击“new“，进入新建仓库页面；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/GitHub2.png\" alt=\"GitHub2\"></p>\n<p>仓库名称填写&lt;user name&gt;.github.io，&lt;user name&gt;就是GitHub的账户名称，然后点击”create repository“；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/GitHub3.png\" alt=\"GitHub3\"></p>\n<p>点击”creating a new file“；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/GitHub4.png\" alt=\"GitHub4\"></p>\n<p>选择“index.html”，然后填写文件内容，文件内容可以自定义；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/GitHub5.png\" alt=\"GitHub5\"></p>\n<p>点击”Commit new file“；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/GitHub6.png\" alt=\"GitHub6\"></p>\n<p>点击”Add file“；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/GitHub7.png\" alt=\"GitHub7\"></p>\n<p>选择“Create new file”；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/GitHub8.png\" alt=\"GitHub8\"></p>\n<p>选择“CNAME”，文件内容输入要绑定的域名，域名不要包含http:&#x2F;&#x2F;和www；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/GitHub9.png\" alt=\"GitHub9\"></p>\n<p>点击“Commit new file”；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/GitHub10.png\" alt=\"GitHub10\"></p>\n<h1 id=\"在阿里云中的操作\"><a href=\"#在阿里云中的操作\" class=\"headerlink\" title=\"在阿里云中的操作\"></a>在阿里云中的操作</h1><p>进入阿里云之后，在搜索框中搜索“SSL证书（应用安全）”，进入到数字证书管理服务页面；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1%E9%A1%B5%E9%9D%A2.png\" alt=\"数字证书管理服务页面\"></p>\n<p>点击左侧栏中的“SSL证书”；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/SSL%E8%AF%81%E4%B9%A6.png\" alt=\"SSL证书\"></p>\n<p>点击“免费证书”，然后点击左侧的“立即购买”，勾选相应选项后，点击右下角“立即购买”；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/%E7%AB%8B%E5%8D%B3%E8%B4%AD%E4%B9%B0.png\" alt=\"立即购买\"></p>\n<p>点击“创建证书”，然后点击“证书申请”；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/%E5%88%9B%E5%BB%BA%E8%AF%81%E4%B9%A6.png\" alt=\"创建证书\"></p>\n<p>填写域名等相关信息，点击“下一步”，根据提示进行验证；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7.png\" alt=\"证书申请\"></p>\n<p>进入到域名控制台页面，选择目标域名进行解析；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/%E5%9F%9F%E5%90%8D%E6%8E%A7%E5%88%B6%E5%8F%B0.png\" alt=\"域名控制台\"></p>\n<p>添加两条记录，填写好字段值后点击“确认”；</p>\n<ul>\n<li>记录类型均选择CNAME；</li>\n<li>主机记录一条填写www，一条填写@；</li>\n<li>记录值均填写刚才GitHub中的仓库名&lt;user name&gt;.github.io。</li>\n</ul>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/%E6%B7%BB%E5%8A%A0%E8%AE%B0%E5%BD%95.png\" alt=\"添加记录\"></p>\n<p>两条记录如下图所示。</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/%E8%AE%B0%E5%BD%951.png\" alt=\"记录1\"></p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/%E8%AE%B0%E5%BD%952.png\" alt=\"记录2\"></p>\n<p>（PS 此处在操作的时候，曾参考其他文章，配置如下四条A记录，但在实际使用时均导致无法打开页面，发现只配置上面两条CNAME记录即可。）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">185.199.108.153</span><br><span class=\"line\">185.199.109.153</span><br><span class=\"line\">185.199.110.153</span><br><span class=\"line\">185.199.111.153</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"返回GitHub进行操作\"><a href=\"#返回GitHub进行操作\" class=\"headerlink\" title=\"返回GitHub进行操作\"></a>返回GitHub进行操作</h1><p>点击“Settings”；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/GitHub11.png\" alt=\"GitHub11\"></p>\n<p>点击“Pages”，进入GitHub Pages页面；</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/GitHub12.png\" alt=\"GitHub12\"></p>\n<p>将页面往下拉，找到“Enforce HTTPS”，将其打勾即可（需要等待一段时间才可以操作成功）。</p>\n<p><img src=\"/GitHub%E5%92%8C%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%AE%9E%E7%8E%B0https%E8%AE%A4%E8%AF%81/GitHub13.png\" alt=\"GitHub13\"></p>\n<p>至此，https认证完毕。</p>\n","categories":["疑难杂症"]},{"title":"k-means学习笔记","url":"/2023/02/10/08-05-58/","content":"<h1 id=\"算法思想\"><a href=\"#算法思想\" class=\"headerlink\" title=\"算法思想\"></a>算法思想</h1><p>k-means算法是一种聚类分析算法，通过不断地迭代求解实现对样本的分类，其中k代表的是样本的类别数。k-means对样本按相似性进行分簇，其基本思想是让簇内的样本点更“紧密”一些，也就是说，让每个样本点到本簇中心的距离更近一些。</p>\n<h1 id=\"算法步骤\"><a href=\"#算法步骤\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h1><ul>\n<li>随机产生k个初始簇中心（或者随机选择k个点作为初始簇中心）；</li>\n<li>对每个点，计算与所有簇中心的距离，将其分配到最近的簇；</li>\n<li>如果没有点发生分配结果的改变，则结束，否则继续下一步；</li>\n<li>计算每个簇中所有点坐标的平均值，找到新的簇中心；</li>\n<li>回到第二步。</li>\n</ul>\n<p>注意</p>\n<ul>\n<li>常用欧式距离作为距离的度量，在计算距离前可以先进行标准化操作。</li>\n<li>算法的优化目标是使每个样本点到本簇中心的距离的平方和尽量小。</li>\n<li>每个样本点到本簇中心的距离的平方和也称为误差平方和（SSE），在优化算法中称为损失函数或代价函数。</li>\n</ul>\n<h1 id=\"算法优缺点\"><a href=\"#算法优缺点\" class=\"headerlink\" title=\"算法优缺点\"></a>算法优缺点</h1><p>优势</p>\n<ul>\n<li>简单，快速，适合常规数据集。</li>\n</ul>\n<p>劣势</p>\n<ul>\n<li><p>不同的初始点对结果的影响非常大；</p>\n</li>\n<li><p>k值难确定，普遍情况下需要多次设置k值来比较；</p>\n</li>\n<li><p>复杂与样本数呈线性关系;</p>\n</li>\n<li><p>很难发现任意形状的簇。</p>\n</li>\n</ul>\n<h1 id=\"算法可视化演示\"><a href=\"#算法可视化演示\" class=\"headerlink\" title=\"算法可视化演示\"></a>算法可视化演示</h1><p><a href=\"https://www.naftaliharris.com/blog/visualizing-k-means-clustering/\">k-means的可视化演示</a></p>\n","categories":["机器学习"]},{"title":"《Hierarchical Text-Conditional Image Generation with CLIP Latents》阅读笔记","url":"/2022/11/19/22-05-53/","content":"<h1 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h1><h2 id=\"模型总述\"><a href=\"#模型总述\" class=\"headerlink\" title=\"模型总述\"></a>模型总述</h2><p>本篇论文主要介绍DALL·E 2模型，它是OpenAI在2022年4月推出的一款模型，OpenAI在2021年1月推出了DALL·E模型，2021年年底推出了GLIDE模型。</p>\n<p>DALL·E 2可以根据文本描述去生成原创性的、真实的图像，这些图像从来没有在训练集里出现过，模型真的学习到了文本图像特征，可以任意地组合其概念、属性、风格。</p>\n<p>DALL·E 2除了根据文本生成图像，还能根据文本对已有的图像进行编辑和修改——可以任意添加或者移除图像里的物体，修改时甚至可以把阴影、光线和物体纹理都考虑在内。</p>\n<p>DALL·E 2可以在没有文本输入的情况下，做一些图像生成的工作——比如给定一张图像，它可以根据已有的图像和它的风格，去生成很多类似这种风格的图像。</p>\n<p>DALL·E 2颠覆了人们对于AI的传统理解——AI不止可以处理重复性工作，也能胜任创造性工作。</p>\n<p>DALL·E 2和DALL·E相比，分辨率是前者的四倍，且生成的图像更真实，与文本描述更贴切。</p>\n<p>考虑到安全性和伦理性方面，DALL·E 2没有开源，连API也没有开放。</p>\n<h2 id=\"发展历程\"><a href=\"#发展历程\" class=\"headerlink\" title=\"发展历程\"></a>发展历程</h2><p><img src=\"/2022/11/19/22-05-53/%E5%8E%86%E7%A8%8B.png\" alt=\"历程\"></p>\n<h1 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h1><p>基于CLIP的分层文本条件图像生成——使用CLIP训练好的特征，来做层级式的依托于文本的图像生成工作。</p>\n<p>所谓的层级式，意思是DALL·E 2模型是先生成一个64 * 64的小分辨率图像，再利用一个模型上采样到256 * 256，然后继续利用一个模型上采样到1024 * 1024，得到最终的一个高清大图，所以说是一个层级式的结构。</p>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>本文提出了一个两阶段的模型：</p>\n<ul>\n<li>prior根据给定的文本描述，生成类似于CLIP的图像特征，prior尝试了自回归模型和扩散模型，发现扩散模型效率高且效果好；</li>\n<li>decoder根据生成的图像特征生成图像，decoder用的是扩散模型。</li>\n</ul>\n<p>该模型有两个亮点：</p>\n<ul>\n<li>生成的图像的写实程度和文本匹配度非常高；</li>\n<li>可以实时利用文本信息引导模型生成、编辑各种图像，且不需要训练（zero-shot）。</li>\n</ul>\n<p><img src=\"/2022/11/19/22-05-53/%E6%91%98%E8%A6%81.png\" alt=\"摘要\"></p>\n<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>CLIP的优点：</p>\n<ul>\n<li>对图像分布的变化很敏感，具有很强的zero-shot能力，并经过微调，在各式的视觉和语言任务中表现优异。</li>\n</ul>\n<p>生成扩散模型的优点：</p>\n<ul>\n<li>很有前景，在近期的研究中，它利用了一种引导技术，通过牺牲一部分多样性，从而达到更好的图像保真度。</li>\n</ul>\n<p><img src=\"/2022/11/19/22-05-53/%E5%BC%95%E8%A8%80.png\" alt=\"引言\"></p>\n<p>在图示中，虚线的上半部分是CLIP的训练过程，虚线的下半部分描述的DALL·E 2的训练过程。</p>\n<p>对于CLIP，在训练时，将文本以及对应的图像分别输入文本编码器和图像编码器，然后得到输出的文本特征和图像特征，这两个特征就是一个正样本，该文本特征与其他图像生成的图像特征就是负样本，通过对比学习，训练文本编码器和图像编码器，从而实现文本的特征和图像的特征联系在一起，成为一个合并的多模态的特征空间。一旦CLIP模型训练结束，文本编码器和图像编码器就冻结了。在DALL·E 2的训练过程中，CLIP就处于冻结状态，没有进行任何训练和微调。</p>\n<p>对于DALL·E 2，在训练时，首先将文本和对应的图像分别输入CLIP的文本编码器和图像编码器，在拿到文本特征后，将其喂入prior模型，由它生成图像特征，在这个过程中，由CLIP图像编码器生成的图像特征充当了ground truth的角色进行监督；在推理时，也就是只有文本没有配对图像的时候，其过程就是将文本输入CLIP文本编码器生成文本特征，文本特征通过prior模型生成图像特征，图像特征通过扩散模型生成最后的图像。DALL·E 2其实就是把CLIP和GLIDE合在一起，GLIDE模型是一个基于扩散模型的文本图像生成的方法。</p>\n<p>DALL·E 2也被作者称为unCLIP。对于CLIP来说，它是给定文本和图像，然后得到特征，可以拿特征去做图像匹配、图像检索之类的工作，是一个从输入到特征的过程；对于DALL·E 2来说，它是通过文本特征，然后到图像特征，最后到图像的过程，其实就是CLIP的反过程，把特征又还原到数据，所以整个框架叫做unCLIP。</p>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><p>训练数据集采用图像文本对，给定图像x，用z<sub>i</sub>表示从CLIP出来的图像特征，z<sub>t</sub>表示从CLIP出来的文本特征，整个模型的网络结构被分成prior模型和decoder模型。</p>\n<p><img src=\"/2022/11/19/22-05-53/%E6%96%B9%E6%B3%95.png\" alt=\"方法\"></p>\n<p>首先准备一个CLIP模型，然后训练DALL·E 2的图像生成模型——给定任意文本将它通过CLIP的文本编码器，得到一个文本特征，然后用prior模型把文本特征变成图像特征，再通过一个解码器，把图像特征变成了几张图像。</p>\n<p><img src=\"/2022/11/19/22-05-53/%E5%85%AC%E5%BC%8F.png\" alt=\"公式\"></p>\n<p>P(x|y)表示给定一个文本y，生成图像x的概率；</p>\n<p>P(x,z<sub>i</sub>|y)表示给定一个文本y，生成图像x和图像特征z<sub>i</sub>的概率。因为图像特征z<sub>i</sub>和图像是一对一的关系，所以z<sub>i</sub>和x是对等的，所以左边第一个等号成立；</p>\n<p>P(x|z<sub>i</sub>,y)表示给定一个文本y和图像特征z<sub>i</sub>去生成图像x的概率（decoder）；</p>\n<p>P(z<sub>i</sub>|y)表示给定一个文本y，生成图像特征z<sub>i</sub>的概率（prior）。</p>\n<h2 id=\"decoder\"><a href=\"#decoder\" class=\"headerlink\" title=\"decoder\"></a>decoder</h2><p>本文的解码器其实就是GLIDE模型的变体，用了CLIP guidance和classifier-free guidance。</p>\n<p>guidance信号要么来自CLIP模型，要么来自于文本，作者随机设10%的时间令CLIP的特征为0，并且训练的时候有50%的时间把文本直接丢弃。</p>\n<p>在生成图像时采用级联式生成的方法，由64 * 64逐步生成得到1024 * 1024的高清大图，为了训练的稳定性，在训练时加了很多噪声。</p>\n<h2 id=\"prior\"><a href=\"#prior\" class=\"headerlink\" title=\"prior\"></a>prior</h2><p><img src=\"/2022/11/19/22-05-53/prior.png\" alt=\"prior\"></p>\n<p>prior模型不论是用自回归模型还是扩散模型，都使用了classifier-free guidance。</p>\n<p>对于扩散prior来说，作者训练了一个Transformer的decoder，因为它的输入输出是embedding，所以不合适用U-Net，选择直接用Transformer处理这个序列。</p>\n<h1 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h1><h2 id=\"图像生成\"><a href=\"#图像生成\" class=\"headerlink\" title=\"图像生成\"></a>图像生成</h2><p>生成给定图像的很多类似图像，所生成的图像风格和原始图像一致，图像中所出现的物体也大体一致。</p>\n<p>其方法是当用户给定一张图像的时候，通过CLIP的图像编码器得到一个图像特征，把图像特征变成文本特征，再把文本特征输入给prior模型生成另外一个图像特征，这个图像特征再生成新的图像。</p>\n<p><img src=\"/2022/11/19/22-05-53/%E5%BA%94%E7%94%A81.png\" alt=\"应用1\"></p>\n<h2 id=\"两个图像之间做内插\"><a href=\"#两个图像之间做内插\" class=\"headerlink\" title=\"两个图像之间做内插\"></a>两个图像之间做内插</h2><p>给定两张图像，在两张图像的图像特征之间做内插，当插出来的特征更偏向于某个图像时，所生成的图像也就更多地具有该图像的特征。</p>\n<p><img src=\"/2022/11/19/22-05-53/%E5%BA%94%E7%94%A82.png\" alt=\"应用2\"></p>\n<h2 id=\"两个文本之间做内插\"><a href=\"#两个文本之间做内插\" class=\"headerlink\" title=\"两个文本之间做内插\"></a>两个文本之间做内插</h2><p><img src=\"/2022/11/19/22-05-53/%E5%BA%94%E7%94%A83.png\" alt=\"应用3\"></p>\n<h1 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h1><p><img src=\"/2022/11/19/22-05-53/result.png\" alt=\"result\"></p>\n<h1 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h1><p>不能很好地把物体和属性联系起来（很有可能是CLIP模型的原因）。</p>\n<p><img src=\"/2022/11/19/22-05-53/%E5%B1%80%E9%99%901.png\" alt=\"局限1\"></p>\n<p>当生成的图像里有文字时，文字是错误的（有可能是文本编码器使用了BPE编码）。</p>\n<p><img src=\"/2022/11/19/22-05-53/%E5%B1%80%E9%99%902.png\" alt=\"局限2\"></p>\n<p>不能生成特别复杂的场景，很多细节生成不出来。</p>\n<p><img src=\"/2022/11/19/22-05-53/%E5%B1%80%E9%99%903.png\" alt=\"局限3\"></p>\n<h1 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h1><h2 id=\"Generative-Adversarial-Networks（GAN）：生成对抗网络\"><a href=\"#Generative-Adversarial-Networks（GAN）：生成对抗网络\" class=\"headerlink\" title=\"Generative Adversarial Networks（GAN）：生成对抗网络\"></a>Generative Adversarial Networks（GAN）：生成对抗网络</h2><p>GAN包含有两个模型，一个是生成模型（generative model），一个是判别模型(discriminative model)。</p>\n<p>生成模型的任务是生成看起来自然真实的、和原始数据相似的实例。判别模型的任务是判断给定的实例看起来是自然真实的还是人为伪造的（真实实例来源于数据集，伪造实例来源于生成模型）。</p>\n<p>这可以看做一种零和游戏，生成模型像“一个造假团伙，试图生产和使用假币”，而判别模型像“检测假币的警察”。生成器（generator）试图欺骗判别器（discriminator），判别器则努力不被生成器欺骗。模型经过交替优化训练，两种模型都能得到提升，但最终我们要得到的是效果提升到很高很好的生成模型（造假团伙），这个生成模型（造假团伙）所生成的产品能达到真假难分的地步。因为GAN的目标函数是用来以假乱真的，所以截至目前为止，GAN生成的图像保真度非常高，引燃了DeepFakes的火爆，但是它的多样性不好，且不太具备原创性，这也是最近的模型如DALL·E 2和Imagen都是用扩散模型的原因，因为扩散模型多样性好，还有创造力。</p>\n<p>GAN的缺点</p>\n<ul>\n<li>训练不够稳定，最主要的原因是要同时训练两个网络，所以有一个平衡的问题，容易发生模型的训练坍塌；</li>\n<li>生成图像的多样性不好，本质是创造性不好；</li>\n<li>不是一个概率模型，它的生成都是隐式的，就是通过一个网络去完成，无法获知它到底做了什么、遵循了什么分布，所以GAN在数学上不如后续的VAE，或者扩散模型。</li>\n</ul>\n<h2 id=\"Auto-Encoder（AE）：自编码器\"><a href=\"#Auto-Encoder（AE）：自编码器\" class=\"headerlink\" title=\"Auto-Encoder（AE）：自编码器\"></a>Auto-Encoder（AE）：自编码器</h2><p>是一种无监督式的学习模型，它基于反向传播算法与最优化方法（如梯度下降法），利用输入数据X本身作为监督，来指导神经网络尝试学习一个映射关系，从而得到一个重构输出X<sup>R</sup>。</p>\n<p>算法模型包含Encoder（编码器）和Decoder（解码器）。</p>\n<p>编码器的作用是把高维输入X编码成低维隐变量h从而强迫神经网络学习最有信息量的特征；</p>\n<p>解码器的作用是把隐藏层的隐变量h还原到初始维度，最好的状态就是解码器的输出能够完美地或者近似恢复出原来的输入， 即X<sup>R</sup>≈X  。</p>\n<p><img src=\"/2022/11/19/22-05-53/AE4.png\" alt=\"AE4\"></p>\n<p>从输入层 -&gt;隐藏层的原始数据X的编码过程：</p>\n<p><img src=\"/2022/11/19/22-05-53/AE1.png\" alt=\"AE1\"></p>\n<p>从隐藏层 -&gt; 输出层的解码过程：</p>\n<p><img src=\"/2022/11/19/22-05-53/AE2.png\" alt=\"AE2\"></p>\n<p>算法的优化目标函数： </p>\n<p><img src=\"/2022/11/19/22-05-53/AE3.png\" alt=\"AE3\"></p>\n<p>其中dist为二者的距离度量函数，通常用MSE（均方方差）。</p>\n<p>自编码可以实现类似于PCA等数据降维、数据压缩的特性。如果输入层神经元的个数n大于隐层神经元个数m，那么就相当于把数据从n维降到了m维；然后可以利用这m维的特征向量，重构原始的数据。这个跟PCA降维一模一样，只不过PCA是通过求解特征向量进行降维，是一种线性的降维方式，而自编码是一种非线性降维。</p>\n<h2 id=\"Denoising-Auto-Encoder（DAE）：去噪自编码器\"><a href=\"#Denoising-Auto-Encoder（DAE）：去噪自编码器\" class=\"headerlink\" title=\"Denoising Auto-Encoder（DAE）：去噪自编码器\"></a>Denoising Auto-Encoder（DAE）：去噪自编码器</h2><p>先向输入注入噪声，然后把经过扰乱的输入传给编码器，让解码器重构不含噪声的输入。</p>\n<p>这种方法可以让训练的模型非常稳健，不容易过拟合，部分原因是因为图像像素冗余度太高了，所以即使把原来的图像做一些污染，模型还是能抓住它的本质，将它重建出来。</p>\n<h2 id=\"Variational-Auto-Encoder（VAE）：变分自编码器\"><a href=\"#Variational-Auto-Encoder（VAE）：变分自编码器\" class=\"headerlink\" title=\"Variational  Auto-Encoder（VAE）：变分自编码器\"></a>Variational  Auto-Encoder（VAE）：变分自编码器</h2><p>VAE其实跟AE很不一样，它不再是学习固定的隐藏层特征了，而是在学习一种分布，比如假设这个分布是一个高斯分布，可以用均值和方差描述，编码器不再直接输出h，而是输出h分布的均值和方差，再从这个分布中采样得到h，然后h再通过解码器。简而言之，VAE预测的是一个分布。</p>\n<h2 id=\"Vector-Quantized-VAE（VQ-VAE）：向量量化的变分自编码器\"><a href=\"#Vector-Quantized-VAE（VQ-VAE）：向量量化的变分自编码器\" class=\"headerlink\" title=\"Vector Quantized VAE（VQ-VAE）：向量量化的变分自编码器\"></a>Vector Quantized VAE（VQ-VAE）：向量量化的变分自编码器</h2><p>就是把VAE做量化，它采用的是离散的隐变量，不像VAE那样采用连续的隐变量。</p>\n<h2 id=\"VQ-VAE2\"><a href=\"#VQ-VAE2\" class=\"headerlink\" title=\"VQ-VAE2\"></a>VQ-VAE2</h2><p>把隐空间分成了两个，一个上层隐空间(top latent space)，一个下层隐空间(bottom latent space)。上层隐向量 用于表示全局信息，下层隐向量 用于表示 局部信息。</p>\n<h2 id=\"DALL·E\"><a href=\"#DALL·E\" class=\"headerlink\" title=\"DALL·E\"></a>DALL·E</h2><p>由OpenAI提出的能根据文本描述生成类似超现实主义图像的图像生成器。</p>\n<h2 id=\"autoregressive-models（AR）：自回归模型\"><a href=\"#autoregressive-models（AR）：自回归模型\" class=\"headerlink\" title=\"autoregressive models（AR）：自回归模型\"></a>autoregressive models（AR）：自回归模型</h2><p>自回归模型是统计上一种处理时间序列的方法，用同一变数例如x的之前各期，亦即x<sub>1</sub>至x<sub>t-1</sub>来预测本期x<sub>t</sub>的表现，并假设它们为线性关系。因为这是从回归分析中的线性回归发展而来，只是不用x预测y，而是用x预测 x（自己）,所以叫做自回归。神经网络中的自回归模型，将联合概率拆成了条件概率累乘的形式。</p>\n<h2 id=\"diffusion-models：生成扩散模型\"><a href=\"#diffusion-models：生成扩散模型\" class=\"headerlink\" title=\"diffusion models：生成扩散模型\"></a>diffusion models：生成扩散模型</h2><p>diffusion models名字来源于热力学的启发，工作原理从本质上来说是通过连续添加高斯噪声来破坏训练数据，然后通过反转这个噪声过程，来学习恢复数据。</p>\n<p>它是Encoder-Decoder架构的模型，分为扩散阶段和逆扩散阶段。 </p>\n<ul>\n<li><p>在扩散阶段，通过不断对原始数据添加噪声，使数据从原始分布变为我们期望的分布，例如通过不断添加高斯噪声将原始数据分布变为正态分布。 </p>\n</li>\n<li><p>在逆扩散阶段，使用神经网络（U-Net，一个CNN）将数据从正态分布恢复到原始数据分布。</p>\n</li>\n</ul>\n<p>训练后，可以使用该模型将原始输入的图像去噪生成新图像。</p>\n<p>优点是正态分布上的每个点都是真实数据的映射，模型具有更好的可解释性。缺点是迭代采样速度慢，导致模型训练和预测效率低。</p>\n<p>扩散模型早在2015年或者更早的时候就被提出来了，但当时只是一个想法，一直到2020年6月DDPM提出来后，扩散模型才开始火爆，DDPM算是扩散模型的开山之作。</p>\n<p>DDPM对原始的扩散模型做了一些改进，把优化过程变得简单，有两个最重要的贡献：</p>\n<ul>\n<li>之前大家都是x<sub>t</sub>预测x<sub>t-1</sub>，做图像到图像的转化，而DDPM预测x<sub>t-1</sub>到x<sub>t</sub>的噪声是怎么加的，有点像ResNet，本来是直接用x预测y，现在理解成y&#x3D;x+residual，转而预测残差residual就可以了；</li>\n<li>原本预测一个正态分布，要去学它的均值和方差，作者提出可以把方差视为一个常数，只要去预测均值就可以了，再次降低了模型优化的难度。</li>\n</ul>\n<p>DDPM和VAE有很多相似之处，都是编码器、解码器的结构，不同点在于：</p>\n<ul>\n<li>在扩散模型中，编码器的一步步运算是一个固定的过程，对于VAE来说，编码器则不是这样；</li>\n<li>在扩散模型中，每一步中间过程的输出跟刚开始的输入都是同样维度的大小，对于VAE来说，它中间的bottleneck特征往往比输入小得多；</li>\n<li>在扩散模型中，从随机噪声开始，要经过很多步才能生成一个图像，所以它有time step、time embedding的概念，而且在所有的time step里面它的U-Net模型都是共享参数的，在VAE里就不存在这一点。</li>\n</ul>\n<p>improved DDPM相较于DDPM做了一些改进：</p>\n<ul>\n<li>学习了正态分布里的方差，效果更好；</li>\n<li>把添加噪声的schedule改了，从一个线性的schedule改成了余弦的schedule，效果更好；</li>\n<li>简单尝试了一下给扩散模型上更大的模型，效果更好。</li>\n</ul>\n<p>基于improved DDPM的第三个改进，有人发表了论文《Diffusion model beats GAN》，即扩散模型比GAN强。在文中：</p>\n<ul>\n<li>作者把模型加大加宽，增加自注意力头（attention head）的数量；</li>\n<li>发现single-scale的attention不够用，改用multi-scale的attention；</li>\n<li>提出新的归一化方式，叫做adaptive group normalization，根据步数去做自适应的归一化；</li>\n<li>使用classifier guidance的方法，去引导模型做采样和生成，这不仅让生成的图像更加逼真，而且也加速了方向采样的速度。论文中表明做25次采样，就能从一个噪声生成一个非常好的图像。</li>\n</ul>\n<p><img src=\"/2022/11/19/22-05-53/classifier-guidance.png\" alt=\"classifier-guidance\"></p>\n<p>classifier guidance diffusion是说在我们训练扩散模型的同时，再训练一个图像分类器，这个分类器是在ImagNet上的图像加上噪声训练来的。分类器的作用是对于图像x<sub>t</sub>，它可以计算一个交叉熵目标函数，得到一些梯度，然后使用这个梯度，去帮助模型进行采样和图像生成。分类器可以根据需求进行选择，把分类器换成CLIP模型，那么文本和图像就联系起来了，此时我们不光可以利用梯度去引导模型的采样和生成，甚至可以利用文本去控制图像的采样和生成。</p>\n<p>classifier guidance diffusion的成本很高，它要求我们要么有一个pre-trained的模型，要么得重新训练一个模型，所以引出来后续的classifier-free guidance。</p>\n<p>classifier-free guidance不使用分类器，而是在训练模型的时候让它生成两个输出，一个是在有条件时生成的，一个是在无条件时生成的。比如用图像文本对训练的时候，用文本去做这个guidance信号，生成一个图像，然后不用这个文本，而用一个空的序列，再去生成另外一个图像。假设生成的两个图像在一个空间里，那么就会有一个方向能从这种无文本得到的图像指向有文本得到的图像，通过训练得到二者之间的距离，那么等到反向扩散的时候，即使我们的图像输出是没有使用文本生成的，我们也能做出一个比较合理的推理，从一个没有条件生成的x变成一个有条件生成的x，摆脱分类器的限制。这个方法因为产生两个输出，模型的训练成本是很大的。在GLIDE、DALL·E 2、Imagen都使用了classifier-free guidance。</p>\n<h2 id=\"Contrastive-Learning：对比学习\"><a href=\"#Contrastive-Learning：对比学习\" class=\"headerlink\" title=\"Contrastive Learning：对比学习\"></a>Contrastive Learning：对比学习</h2><p>是一种自监督学习方法，用于在没有标签的情况下，通过让模型学习哪些数据点相似或不同来学习数据集的一般特征。</p>\n<h2 id=\"zero-shot-learning：零次学习\"><a href=\"#zero-shot-learning：零次学习\" class=\"headerlink\" title=\"zero-shot learning：零次学习\"></a>zero-shot learning：零次学习</h2><p>它是利用训练集数据训练模型，使得模型能够对测试集的对象进行分类，但是训练集类别和测试集类别之间没有交集，期间是借助类别的描述，来建立训练集和测试集之间的联系，从而使得模型有效。对于要分类的类别对象，是一次也不学习的。</p>\n<h2 id=\"PCA（-Principal-Component-Analysis-）：主成分分析\"><a href=\"#PCA（-Principal-Component-Analysis-）：主成分分析\" class=\"headerlink\" title=\"PCA（ Principal Component Analysis ）：主成分分析\"></a>PCA（ Principal Component Analysis ）：主成分分析</h2><p>是一种使用最广泛的数据降维算法。PCA的主要思想是将n维特征映射到k维上，这k维是全新的正交特征也被称为主成分，是在原有n维特征的基础上重新构造出来的k维特征。PCA的工作就是从原始的空间中顺序地找一组相互正交的坐标轴，新的坐标轴的选择与数据本身是密切相关的。其中，第一个新坐标轴选择是原始数据中方差最大的方向，第二个新坐标轴选取是与第一个坐标轴正交的平面中使得方差最大的，第三个轴是与第1,2个轴正交的平面中方差最大的。依次类推，可以得到n个这样的坐标轴。</p>\n<h2 id=\"Embedding：嵌入层\"><a href=\"#Embedding：嵌入层\" class=\"headerlink\" title=\"Embedding：嵌入层\"></a>Embedding：嵌入层</h2><p>它能把万物嵌入万物，是沟通两个世界的桥梁。数学定义即：它是单射且同构的。</p>\n<p>简单来说，我们常见的地图就是对于现实地理的Embedding，现实的地理地形的信息其实远远超过三维，但是地图通过颜色和等高线等来最大化表现现实的地理信息。通过它，我们在现实世界里的文字、图像、语言、视频就能转化为计算机能识别、能使用的语言，且转化的过程中信息不丢失。</p>\n<p>可以通过矩阵乘法进行降维，假如我们有一个100W X10W的矩阵，用它乘上一个10W X 20的矩阵，我们可以把它降到100W X 20，瞬间量级降了10W&#x2F;20&#x3D;5000倍；也可以进行升维，对低维的数据进行升维时，可能把一些其他特征给放大了，或者把笼统的特征给分开了。</p>\n<h3 id=\"Feature-Embedding：特征嵌入\"><a href=\"#Feature-Embedding：特征嵌入\" class=\"headerlink\" title=\"Feature Embedding：特征嵌入\"></a>Feature Embedding：特征嵌入</h3><p>将数据转换（降维）为固定大小的特征表示（矢量），以便于处理和计算（如求距离）。</p>\n<h3 id=\"Image-Embedding：图像嵌入\"><a href=\"#Image-Embedding：图像嵌入\" class=\"headerlink\" title=\"Image Embedding：图像嵌入\"></a>Image Embedding：图像嵌入</h3><p>将图像转换成n维的特征向量。</p>\n<h3 id=\"Word-Embedding：词嵌入\"><a href=\"#Word-Embedding：词嵌入\" class=\"headerlink\" title=\"Word Embedding：词嵌入\"></a>Word Embedding：词嵌入</h3><p>将非结构化的文本转换为n维结构化的特征向量。</p>\n<ul>\n<li>可以将文本通过一个低维向量来表达，不像 one-hot 那么长；</li>\n<li>语意相似的词在向量空间上也会比较相近；</li>\n<li>通用性很强，可以用在不同的任务中。</li>\n</ul>\n<h2 id=\"latent-space：潜在空间\"><a href=\"#latent-space：潜在空间\" class=\"headerlink\" title=\"latent space：潜在空间\"></a>latent space：潜在空间</h2><p>原始数据压缩（编码）后的表示（即特征向量）所在的空间，即为潜在空间。</p>\n<ul>\n<li>潜在空间只是压缩数据的表示，其中相似的数据点在空间上更靠近在一起；</li>\n<li>潜在空间对于学习数据特征和查找更简单的数据表示形式以进行分析很有用；</li>\n<li>可以通过分析潜在空间中的数据（通过流形，聚类等）来了解数据点之间的模式或结构相似性；</li>\n<li>可以在潜在空间内插值数据，并使用模型的解码器来“生成”数据样本（比如生成新图像）；</li>\n<li>可以使用t-SNE和LLE之类的算法来可视化潜在空间，该算法将潜在空间表示形式转换为2D或3D。</li>\n</ul>\n<h2 id=\"State-Of-The-Art-（SOTA）\"><a href=\"#State-Of-The-Art-（SOTA）\" class=\"headerlink\" title=\"State Of The Art （SOTA）\"></a>State Of The Art （SOTA）</h2><p>表示效果最好的方法。</p>\n<h1 id=\"主要参考\"><a href=\"#主要参考\" class=\"headerlink\" title=\"主要参考\"></a>主要参考</h1><ul>\n<li><a href=\"https://www.bilibili.com/video/BV17r4y1u77B/?spm_id_from=333.337.search-card.all.click&vd_source=48b919231ff82c6c96b7d0acfd50d174\">DALL·E 2【论文精读】</a>；</li>\n<li>网上相关参考资料。</li>\n</ul>\n","categories":["论文阅读"]},{"title":"低代码相关概念及钉钉宜搭初使用","url":"/2022/11/26/18-57-05/","content":"<h1 id=\"传统软件开发的痛点\"><a href=\"#传统软件开发的痛点\" class=\"headerlink\" title=\"传统软件开发的痛点\"></a>传统软件开发的痛点</h1><h2 id=\"开发成本高\"><a href=\"#开发成本高\" class=\"headerlink\" title=\"开发成本高\"></a>开发成本高</h2><ul>\n<li>IT开发人力成本；</li>\n<li>沟通成本;</li>\n<li>基础设施成本;</li>\n<li>维护成本。</li>\n</ul>\n<h2 id=\"交付周期长\"><a href=\"#交付周期长\" class=\"headerlink\" title=\"交付周期长\"></a>交付周期长</h2><p>从基础设施搭建到应用软件的开发、测试到部署上线，交付周期长达数月。</p>\n<h2 id=\"需求变化快\"><a href=\"#需求变化快\" class=\"headerlink\" title=\"需求变化快\"></a>需求变化快</h2><p>业务需求多变，技术人员与业务人员之间存在信息理解和传递的消耗。</p>\n<h1 id=\"低代码相关概念\"><a href=\"#低代码相关概念\" class=\"headerlink\" title=\"低代码相关概念\"></a>低代码相关概念</h1><h2 id=\"低代码及低代码开发平台\"><a href=\"#低代码及低代码开发平台\" class=\"headerlink\" title=\"低代码及低代码开发平台\"></a>低代码及低代码开发平台</h2><p>所谓的低代码（low-code）即很低的代码量，通过低代码开发平台（low-code development platform，LCDP）可以实现低代码开发，低代码开发是一种可视化的应用开发方法，通过对图形化控件进行拖、拉、拽等操作以及参数配置来构建所需要的软件应用，开发过程中仅使用较少的代码，甚至不使用代码。</p>\n<h2 id=\"低代码的发展历程\"><a href=\"#低代码的发展历程\" class=\"headerlink\" title=\"低代码的发展历程\"></a>低代码的发展历程</h2><p><img src=\"/2022/11/26/18-57-05/%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B.png\" alt=\"低代码发展历程\"></p>\n<h2 id=\"低代码的发展趋势\"><a href=\"#低代码的发展趋势\" class=\"headerlink\" title=\"低代码的发展趋势\"></a>低代码的发展趋势</h2><p>2019年8月，Gartner对5年内的低代码应用平台发展做出了两大预测：</p>\n<ul>\n<li>到2024年，四分之三的大型企业将使用至少四种低代码开发工具进行应用开发；</li>\n<li>到2024年，65%以上的应用将由低代码工具开发。</li>\n</ul>\n<p>人人都是开发者：Citizen Developer，即平民开发者，让不懂代码的业务人员成为开发者。</p>\n<h2 id=\"低代码开发优点\"><a href=\"#低代码开发优点\" class=\"headerlink\" title=\"低代码开发优点\"></a>低代码开发优点</h2><ul>\n<li>提升程序员开发效率，实现业务应用的快速交付，降低业务应用的开发成本；</li>\n<li>降低开发人员门槛，让不懂代码的外行人也参与到项目开发。</li>\n</ul>\n<h2 id=\"主流低代码开发平台\"><a href=\"#主流低代码开发平台\" class=\"headerlink\" title=\"主流低代码开发平台\"></a>主流低代码开发平台</h2><h3 id=\"国内平台\"><a href=\"#国内平台\" class=\"headerlink\" title=\"国内平台\"></a>国内平台</h3><ul>\n<li><a href=\"https://www.jiandaoyun.com/\">简道云（2015年上线）</a>；</li>\n<li><a href=\"https://help.h3yun.com/\">氚云（2016年上线）</a>；</li>\n<li><a href=\"http://www.awspaas.com/\">炎黄盈动AWS PaaS（2017年上线）；</a></li>\n<li><a href=\"https://www.mingdao.com/\">明道云（2018年上线明道乐高版）</a>；</li>\n<li><a href=\"https://www.aliwork.com/\">宜搭（2019年上线）</a>；</li>\n<li><a href=\"https://www.informat.cn/\">织信Informat（2020年上线）</a>。</li>\n</ul>\n<h3 id=\"国外平台\"><a href=\"#国外平台\" class=\"headerlink\" title=\"国外平台\"></a>国外平台</h3><ul>\n<li>Mendix：美国低代码开发厂商，低代码开发平台的全球领导者之一，2018年被西门子收购；</li>\n<li>OutSystems：低代码市场的长期领导者，Mendix的主要竞争对手，享有重要的市场份额和信誉；</li>\n<li>Microsoft：发展迅速，从Azure到Office，都是基于微软Power Apps构建的；</li>\n<li>ServiceNow：一款基于云的平台，高度可定制，在流程自动化方面功能强大；</li>\n<li>Salesforce：拥有一流的合作伙伴生态系统支持，但功能和创新方面落后；</li>\n<li>AgilePoint： 灵活性很强，可以处理小型的、情况复杂的各种应用场景。</li>\n</ul>\n<h1 id=\"钉钉宜搭\"><a href=\"#钉钉宜搭\" class=\"headerlink\" title=\"钉钉宜搭\"></a>钉钉宜搭</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>钉钉宜搭是阿里巴巴自研的低代码应用构建平台，集成了云原生和钉原生能力，通过它即使是不懂代码的业务人员也可以快速搭建费控报销、生产跟踪、客户管理、IT资产管理等更贴合业务实际需求的应用系统，极大地降低了应用开发的门槛。</p>\n<h2 id=\"宜搭的应用场景\"><a href=\"#宜搭的应用场景\" class=\"headerlink\" title=\"宜搭的应用场景\"></a>宜搭的应用场景</h2><p><img src=\"/2022/11/26/18-57-05/%E5%AE%9C%E6%90%AD%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png\" alt=\"宜搭应用场景\"></p>\n<h2 id=\"核心功能\"><a href=\"#核心功能\" class=\"headerlink\" title=\"核心功能\"></a>核心功能</h2><p>宜搭具备三大核心功能：表单功能、流程功能和报表功能。</p>\n<h3 id=\"表单功能\"><a href=\"#表单功能\" class=\"headerlink\" title=\"表单功能\"></a>表单功能</h3><p>表单能实现数据的在线收集与实时填报，可以通过拖、拉、拽的方式设置表单组件，表单完成后，可以分发给相关成员提交表单数据。</p>\n<h3 id=\"流程功能\"><a href=\"#流程功能\" class=\"headerlink\" title=\"流程功能\"></a>流程功能</h3><p>流程结合表单和工作流程，完成流程表单设计后需要对业务流程和审批规则进行设计，当成员完成表单填写后即发起流程，流程流转给相应负责人员进行审批。</p>\n<h3 id=\"报表功能\"><a href=\"#报表功能\" class=\"headerlink\" title=\"报表功能\"></a>报表功能</h3><p>报表可以将表单中收集的数据进行可视化的统计与分析，方便决策人员进行趋势分析和决策制定。</p>\n<h2 id=\"核心优势\"><a href=\"#核心优势\" class=\"headerlink\" title=\"核心优势\"></a>核心优势</h2><p>宜搭与阿里云和钉钉的能力深度融合，具有三大优势：易连接、酷数据、更安全。</p>\n<p><img src=\"/2022/11/26/18-57-05/%E5%AE%9C%E6%90%AD%E4%BC%98%E5%8A%BF.png\" alt=\"宜搭优势\"></p>\n<h3 id=\"易连接\"><a href=\"#易连接\" class=\"headerlink\" title=\"易连接\"></a>易连接</h3><p>宜搭默认使用钉钉的企业通讯录，支持钉钉消息，代办群聊等，它具有数十种业务连接器，可快速连接钉钉基础功能和生态应用。</p>\n<h3 id=\"酷数据\"><a href=\"#酷数据\" class=\"headerlink\" title=\"酷数据\"></a>酷数据</h3><p>宜搭数据源和Data V实现无缝连接，用户可以直接在Data V的数据源中选择宜搭应用的数据，并可通过拖拽的方式使用宜搭应用的数据源完成大屏页面的配置——宜搭具有丰富的图表可视化、大数据的加工处理能力和酷炫的数据化大屏。</p>\n<h3 id=\"更安全\"><a href=\"#更安全\" class=\"headerlink\" title=\"更安全\"></a>更安全</h3><p>宜搭具有基于云原生的数据安全保障，具备国家级数据安全体系，拥有强大的阿里巴巴安全服务保障。</p>\n<ul>\n<li>数据安全：应用间、企业间均采用数据库级隔离，统一风控账号体系+独立企业域名保障业务始终运行于安全沙箱；</li>\n<li>管理安全：提供丰富平台管理员能力控制，配合审批流管控，操作记录，发布回滚，全局安全水印，让管理可管可控；</li>\n<li>平台安全：依托钉钉全面的安全防护策略、阿里安全部10年以上网络攻防防入侵体系，提供国密级安全保护。</li>\n</ul>\n<h3 id=\"开箱即用\"><a href=\"#开箱即用\" class=\"headerlink\" title=\"开箱即用\"></a>开箱即用</h3><p>除了以上三大优势，宜搭还预制了200+通用及行业模板，开箱即用的业务在线化解决方案。所有模板均支持低代码的方式定制，适配个性化业务需求。</p>\n<h2 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h2><h3 id=\"什么是应用\"><a href=\"#什么是应用\" class=\"headerlink\" title=\"什么是应用\"></a>什么是应用</h3><p>应用是实现一定业务能力的系统，包含手机端应用和PC端应用，通常由若干张表单和报表组成。</p>\n<h3 id=\"创建应用的前提条件\"><a href=\"#创建应用的前提条件\" class=\"headerlink\" title=\"创建应用的前提条件\"></a>创建应用的前提条件</h3><ul>\n<li>安装并注册钉钉；</li>\n<li>加入组织。</li>\n</ul>\n<h3 id=\"如何创建应用\"><a href=\"#如何创建应用\" class=\"headerlink\" title=\"如何创建应用\"></a>如何创建应用</h3><p>用户在登录后可以进入宜搭工作台，然后可以进行应用的创建、管理和使用。</p>\n<p>有三种方式可以创建宜搭的应用：从模板创建应用、创建空白应用、从Excel创建应用。根据需求点击创建即可。</p>\n<p><img src=\"/2022/11/26/18-57-05/%E5%BA%94%E7%94%A8.png\" alt=\"应用\"></p>\n<ul>\n<li>从模板创建：宜搭提供丰富的模板，直接启用模板即可快速获得已预置好功能的业务应用，也可以在模板的基础上进行自定义，适配个性化的业务需求。</li>\n<li>从空白创建：当模板应用无法满足业务场景需求时，可以从空白开始自主搭建应用。</li>\n<li>从Excel创建：可以将一个本地Excel表直接转化为应用，实现在线数据的增删改查和统计分析。</li>\n</ul>\n<h3 id=\"应用的生命周期\"><a href=\"#应用的生命周期\" class=\"headerlink\" title=\"应用的生命周期\"></a>应用的生命周期</h3><p>应用的生命周期通常分为应用的创建、应用页面管理、应用的设置、应用的发布和应用的删除五个阶段。</p>\n<h3 id=\"应用的页面类型\"><a href=\"#应用的页面类型\" class=\"headerlink\" title=\"应用的页面类型\"></a>应用的页面类型</h3><ul>\n<li>普通表单：数据收集、事件跟踪；</li>\n<li>流程表单：业务审批、任务协同；</li>\n<li>报表：数据分析、报表展示；</li>\n<li>大屏：业务数字化酷炫大屏；</li>\n<li>自定义页面：信息展示及导航、门户页面；</li>\n<li>外部链接：从本站链接到外部。</li>\n</ul>\n<h2 id=\"学习平台\"><a href=\"#学习平台\" class=\"headerlink\" title=\"学习平台\"></a>学习平台</h2><p>钉钉平台提供宜搭低代码开发的视频与题目，路径在：手机钉钉-我的-发现-数字化管理师-低代码开发师。</p>\n<p><a href=\"http://www.aliwork.com/\">宜搭官网</a></p>\n","categories":["低代码"]},{"title":"使用Metaweblog上传MD文件到博客园遇到的几个问题","url":"/2022/11/16/19-02-55/","content":"<h1 id=\"can’t-open-file-‘upload-py’-Errno-2-No-such-file-or-directory\"><a href=\"#can’t-open-file-‘upload-py’-Errno-2-No-such-file-or-directory\" class=\"headerlink\" title=\"can’t open file ‘upload.py’: [Errno 2] No such file or directory\"></a>can’t open file ‘upload.py’: [Errno 2] No such file or directory</h1><p><img src=\"/2022/11/16/19-02-55/q1.png\" alt=\"q1\"></p>\n<p>分析：upload.py文件在pycnblog源代码文件夹下，而cmd命令的执行路径是C:\\WINDOWS\\System32，所以提示找不到文件。</p>\n<p>解决方法：</p>\n<p>1、首先，以管理员身份打开cmd窗口。</p>\n<p><img src=\"/2022/11/16/19-02-55/a11.png\" alt=\"a11\"></p>\n<p>2、然后，找到pycnblog源代码所在的路径，并在该路径下重新执行命令。</p>\n<p><img src=\"/2022/11/16/19-02-55/a12.png\" alt=\"a12\"></p>\n<h1 id=\"AttributeError-module-‘asyncio’-has-no-attribute-‘run’\"><a href=\"#AttributeError-module-‘asyncio’-has-no-attribute-‘run’\" class=\"headerlink\" title=\"AttributeError: module ‘asyncio’ has no attribute ‘run’\"></a>AttributeError: module ‘asyncio’ has no attribute ‘run’</h1><p>分析：这是由于Python中asyncio版本不兼容导致的。</p>\n<p>解决方法：（任选一种方法即可）</p>\n<ul>\n<li>法一：将Python版本升级至3.7及以上。</li>\n<li>法二：打开upload.py文件，将报错的run函数注释或者删除，并在下方添加以下语句。</li>\n</ul>\n<p><code>loop = asyncio.get_event_loop()</code></p>\n<p><code> result = loop.run_until_complete()</code></p>\n<p><img src=\"/2022/11/16/19-02-55/a2.png\" alt=\"a2\"></p>\n<h1 id=\"AttributeError-module-‘asyncio’-has-no-attribute-‘create-task’\"><a href=\"#AttributeError-module-‘asyncio’-has-no-attribute-‘create-task’\" class=\"headerlink\" title=\"AttributeError: module ‘asyncio’ has no attribute ‘create_task’\"></a>AttributeError: module ‘asyncio’ has no attribute ‘create_task’</h1><p>分析：这同样是由于Python中asyncio版本不兼容导致的。</p>\n<p>解决方法：（任选一种方法即可）</p>\n<ul>\n<li>将Python版本升级至3.7及以上。</li>\n<li>打开upload.py文件，将报错的create_task函数改成ensure_future函数。</li>\n</ul>\n<p><img src=\"/2022/11/16/19-02-55/a3.png\" alt=\"a3\"></p>\n<h1 id=\"xmlrpc-client-Fault：-lt-Fault401：’请配置正确的用户名与访问令牌-access-token-，密码登录已取消，请在密码框中输入访问令牌…\"><a href=\"#xmlrpc-client-Fault：-lt-Fault401：’请配置正确的用户名与访问令牌-access-token-，密码登录已取消，请在密码框中输入访问令牌…\" class=\"headerlink\" title=\"xmlrpc.client.Fault：&lt;Fault401：’请配置正确的用户名与访问令牌(access token)，密码登录已取消，请在密码框中输入访问令牌…\"></a>xmlrpc.client.Fault：&lt;Fault401：’请配置正确的用户名与访问令牌(access token)，密码登录已取消，请在密码框中输入访问令牌…</h1><p>分析：博客园取消了密码登录，改成了token登录。</p>\n<p>解决方法：根据提示，打开源码文件夹中的config.yaml配置文件，把里面的password字段中原来写的密码值改成博客园的token就行。token在博客园设置页面最底部其他设置那栏里面，如果之前没有生成过token，新生成一个即可。</p>\n<p>1、在首页点击管理；</p>\n<p><img src=\"/2022/11/16/19-02-55/a41.png\" alt=\"a41\"></p>\n<p>2、点击设置；</p>\n<p><img src=\"/2022/11/16/19-02-55/a42.png\" alt=\"a42\"></p>\n<p>3、鼠标拖到页面最下方，找到其他设置，将它点开，MetaWeblog访问令牌就是要找的token。</p>\n<p><img src=\"/2022/11/16/19-02-55/a43.png\" alt=\"a43\"></p>\n<p>4、将config.yaml中的password字段值改成该token值。</p>\n","categories":["疑难杂症"]},{"title":"使用PyLint评估分析代码质量","url":"/2022/12/07/11-39-16/","content":"<h1 id=\"什么是PyLint\"><a href=\"#什么是PyLint\" class=\"headerlink\" title=\"什么是PyLint\"></a>什么是PyLint</h1><p>PyLint是一款用于评估Python代码质量的分析工具，它诞生于2003年，其最初十年的主要作者和维护者是Sylvain Thénault。PyLint可以用来检查代码是否错误、是否符合编码规范（它默认使用的编码规范是PEP 8），在分析代码后PyLint将会输出一段信息，内容包括在代码中检查到的警告和错误，如果运行两次，它将会输出两次的统计信息，以便使用者分析代码是否得到改进。PyLint的特性是报告尽可能少的错误，但是它会输出非常多的警告信息，所以建议在程序提交之前或者想要整理代码时使用PyLint，这样可以忽略掉大量的无效警告。</p>\n<p>自PyLint 1.4起，PyLint只支持Python 2.7+和Python 3.3+。</p>\n<h1 id=\"安装PyLint\"><a href=\"#安装PyLint\" class=\"headerlink\" title=\"安装PyLint\"></a>安装PyLint</h1><p>在命令行界面执行如下代码，即可安装PyLint：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install pylint</span><br></pre></td></tr></table></figure>\n\n<p>在命令行界面执行如下代码，即可查询PyLint的安装路径：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">where pylint</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"调用PyLint\"><a href=\"#调用PyLint\" class=\"headerlink\" title=\"调用PyLint\"></a>调用PyLint</h1><h2 id=\"在命令行中调用\"><a href=\"#在命令行中调用\" class=\"headerlink\" title=\"在命令行中调用\"></a>在命令行中调用</h2><h3 id=\"分析Python包或者Python模块\"><a href=\"#分析Python包或者Python模块\" class=\"headerlink\" title=\"分析Python包或者Python模块\"></a>分析Python包或者Python模块</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pylint [options] module_or_package</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分析Python文件\"><a href=\"#分析Python文件\" class=\"headerlink\" title=\"分析Python文件\"></a>分析Python文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pylint [options] my_module.py</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"并行分析Python文件\"><a href=\"#并行分析Python文件\" class=\"headerlink\" title=\"并行分析Python文件\"></a>并行分析Python文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pylint -j 4 my_module_1.py my_module_2.py my_module_3.py my_module_4.py</span><br></pre></td></tr></table></figure>\n\n<p> 上述语句将产生4个并行的PyLint子进程来对所需的四个文件并行检查，PyLint发现问题后不会立即显示，待所有模块检查完毕后才会显示。其中，参数-j用于指定所需的PyLint子进程数量，默认值为1。</p>\n<h3 id=\"常用的命令行选项\"><a href=\"#常用的命令行选项\" class=\"headerlink\" title=\"常用的命令行选项\"></a>常用的命令行选项</h3><ul>\n<li><p>–version：显示PyLint以及Python的版本；</p>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pylint --version</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>-h, –help ：显示帮助信息；</p>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">示例一：</span><br><span class=\"line\">pylint -h</span><br><span class=\"line\">示例二：</span><br><span class=\"line\">pylint --help</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>-ry：显示各项信息的报表统计；</p>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pylint -ry my_module.py</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>–generate-rcfile：生成配置信息示例；</p>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">## 将persistent修改为n，并将配置信息保存至pylint.conf文件中</span><br><span class=\"line\">pylint --persistent=n --generate-rcfile &gt; pylint.conf </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>–rcfile&#x3D;&lt;file&gt; ：指定所使用的的配置文件；</p>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pylint --rcfile=pylint.conf my_module.py </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>–persistent&#x3D;y_or_n：是否使用Pickle存储上次结果；</p>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pylint --persistent=y my_nodule.py</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>–output-format&#x3D;&lt;format&gt;：指定输出格式( parseable, colorized, msvs)；</p>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pylint --output-format=parseable my_module.py</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>–msg-template&#x3D;&lt;template&gt;：指定输出内容；</p>\n<p>template参数包括：</p>\n<ul>\n<li>path：文件的相对路径；</li>\n<li>abspath：文件的绝对路径；</li>\n<li>line：输出行数；</li>\n<li>column：输出列数；</li>\n<li>module：模块名；</li>\n<li>obj ： 模块中的对象(如果有的话) ；</li>\n<li>msg ：信息文本；</li>\n<li>msg_id ：信息编号；</li>\n<li>symbol ：信息的符号名称；</li>\n<li>C：信息类别；</li>\n</ul>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pylint --msg-template=&#x27;&#123;msg_id&#125;:&#123;line:3d&#125;:&#123;msg&#125;&#x27; my_module.py</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>–list-msgs：生成pylint的警告列表；</p>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pylint --list-msgs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>–full-documentation ： 以reST格式生成pylint的完整文档。</p>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pylint --full-documentation</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"在Python程序中调用PyLint\"><a href=\"#在Python程序中调用PyLint\" class=\"headerlink\" title=\"在Python程序中调用PyLint\"></a>在Python程序中调用PyLint</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from pylint import epylint as lint</span><br><span class=\"line\">lint.py_run(&quot;my_module.py --msg-template=&#x27;&#123;line:3d&#125;:&#123;msg&#125;&#x27;&quot;)</span><br><span class=\"line\"># 注意，先写文件名，再写命令选项，文件名和命令选项通过空格隔开。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from pylint import epylint as lint</span><br><span class=\"line\">(pylint_stdout, pylint_stderr) = lint.py_run(&#x27;my_module.py&#x27;, return_std=True)</span><br><span class=\"line\"># 注意，返回值类型为StringIO，可以通过read()方法进行读取。</span><br><span class=\"line\">print(pylint_stdout.read())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关联PyLint与PyCharm\"><a href=\"#关联PyLint与PyCharm\" class=\"headerlink\" title=\"关联PyLint与PyCharm\"></a>关联PyLint与PyCharm</h2><h3 id=\"方法一-1\"><a href=\"#方法一-1\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><ul>\n<li><p>进入PyCharm，依次点击： File -&gt; Settings -&gt; Tools -&gt; External Tools，进入下图页面；</p>\n<p><img src=\"/2022/12/07/11-39-16/%E6%AD%A5%E9%AA%A41.png\" alt=\"步骤1\"></p>\n</li>\n<li><p>点击加号，在弹窗中填写下图红色方框中的字段后，点击OK；</p>\n<ul>\n<li>Name参数可以填写pylint；</li>\n<li>Program参数选择pylint.exe的路径，选择后，Working directory参数将自动补全；</li>\n<li>Arguments参数根据实际需求点击右侧Inser Macros进行选择即可，示例中选择检查当前路径下的文件。</li>\n</ul>\n<p><img src=\"/2022/12/07/11-39-16/pylint%E5%85%B3%E8%81%94pycharm.png\" alt=\"pylint关联pycharm\"></p>\n</li>\n<li><p>依次点击Tools-&gt;External Tools-&gt;pylint，即可运行PyLint。</p>\n</li>\n</ul>\n<h3 id=\"方法二-1\"><a href=\"#方法二-1\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><ul>\n<li><p>进入PyCharm，依次点击： File -&gt; Settings -&gt; Plugins，进入下图页面；</p>\n<p><img src=\"/2022/12/07/11-39-16/%E6%AD%A5%E9%AA%A42-1.png\" alt=\"步骤2-1\"></p>\n</li>\n<li><p>点击Browse repositories，进入下图页面；</p>\n<p><img src=\"/2022/12/07/11-39-16/%E6%AD%A5%E9%AA%A42-2.png\" alt=\"步骤2-2\"></p>\n</li>\n<li><p>在左上角搜索框中搜索pylint，右击安装，点击Yes开始下载，之后点击Close，重启PyCharm后即安装成功；</p>\n<p><img src=\"/2022/12/07/11-39-16/%E6%AD%A5%E9%AA%A42-3.png\" alt=\"步骤2-3\"></p>\n</li>\n<li><p>依次点击： File -&gt; Settings -&gt; pylint，可根据实际需求进行配置；</p>\n<p><img src=\"/2022/12/07/11-39-16/%E6%AD%A5%E9%AA%A42-5.png\" alt=\"步骤2-5\"></p>\n</li>\n<li><p>运行时，点击左下角pylint即可查看PyLint输出，单击具体输出内容，可跳转到相关代码行。</p>\n<p><img src=\"/2022/12/07/11-39-16/%E6%AD%A5%E9%AA%A42-6.png\" alt=\"步骤2-6\"></p>\n</li>\n</ul>\n<h2 id=\"PyLint忽略部分警告的方法\"><a href=\"#PyLint忽略部分警告的方法\" class=\"headerlink\" title=\"PyLint忽略部分警告的方法\"></a>PyLint忽略部分警告的方法</h2><h3 id=\"在具体代码处添加注释\"><a href=\"#在具体代码处添加注释\" class=\"headerlink\" title=\"在具体代码处添加注释\"></a>在具体代码处添加注释</h3><p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from PyQt5.QtWidgets import QApplication  # pylint: disable=no-name-in-module</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在命令行处传入参数\"><a href=\"#在命令行处传入参数\" class=\"headerlink\" title=\"在命令行处传入参数\"></a>在命令行处传入参数</h2><p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pylint --disable=no-name-in-module my_module.py</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改调用PyLint时使用的配置文件\"><a href=\"#修改调用PyLint时使用的配置文件\" class=\"headerlink\" title=\"修改调用PyLint时使用的配置文件\"></a>修改调用PyLint时使用的配置文件</h2><p>打开配置文件，找到disable字段，在字段后面添加要忽略的警告。</p>\n<p>使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">disable=raw-checker-failed,</span><br><span class=\"line\">        bad-inline-option,</span><br><span class=\"line\">        locally-disabled,</span><br><span class=\"line\">        file-ignored,</span><br><span class=\"line\">        suppressed-message,</span><br><span class=\"line\">        useless-suppression,</span><br><span class=\"line\">        deprecated-pragma,</span><br><span class=\"line\">        use-symbolic-message-instead,</span><br><span class=\"line\">        similarities,</span><br><span class=\"line\">        no-name-in-module,</span><br><span class=\"line\">        no-member,</span><br><span class=\"line\">        consider-using-f-string,</span><br><span class=\"line\">        anomalous-backslash-in-string,</span><br><span class=\"line\">        consider-using-sys-exit</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"PyLint的输出\"><a href=\"#PyLint的输出\" class=\"headerlink\" title=\"PyLint的输出\"></a>PyLint的输出</h1><h3 id=\"源代码分析\"><a href=\"#源代码分析\" class=\"headerlink\" title=\"源代码分析\"></a>源代码分析</h3><p>对于每个Python模块，PyLint的输出格式如下：</p>\n<ul>\n<li>第一行将在若干’ * ‘字符后显示模块名称；</li>\n<li>从第二行起显示PyLint的输出，默认的输出内容格式为——信息类别：行数：信息内容 。</li>\n</ul>\n<p>信息类别：</p>\n<ul>\n<li>R：违反重构标准；</li>\n<li>C：违反编码规范；</li>\n<li>W：警告；</li>\n<li>E：错误；</li>\n<li>F：致命错误，使PyLint无法进一步处理。</li>\n</ul>\n<p>PyLint的输出范例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">************* Module pylint.checkers.format</span><br><span class=\"line\">W: 50: Too long line (86/80)</span><br><span class=\"line\">W:108: Operator not followed by a space</span><br><span class=\"line\">     print &gt;&gt;sys.stderr, &#x27;Unable to match %r&#x27;, line</span><br><span class=\"line\">            ^</span><br><span class=\"line\">W:141: Too long line (81/80)</span><br><span class=\"line\">W: 74:searchall: Unreachable code</span><br><span class=\"line\">W:171:FormatChecker.process_tokens: Redefining built-in (type)</span><br><span class=\"line\">W:150:FormatChecker.process_tokens: Too many local variables (20/15)</span><br><span class=\"line\">W:150:FormatChecker.process_tokens: Too many branches (13/12)</span><br></pre></td></tr></table></figure>\n\n<p>可以通过pylint –help-msg &lt;msg-id&gt;查询更多信息，使用示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pylint --help-msg C0115</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"检查报告\"><a href=\"#检查报告\" class=\"headerlink\" title=\"检查报告\"></a>检查报告</h3><p>检查报告在源代码分析的后面，每个报告关注项目的特定方面，比如每种类别的信息数目，模块的依赖关系等等。具体来说，报告中会包含如下的方面：</p>\n<ul>\n<li>检查的模块个数；</li>\n<li>对于每个模块，其错误和警告在其中所占的百分比；</li>\n<li>对于所有模块，其错误和警告的总数量；</li>\n<li>文件中带有文档字符串的类、函数和模块所占的百分比；</li>\n<li>……</li>\n</ul>\n<h1 id=\"PyLint与PyChecker的区别\"><a href=\"#PyLint与PyChecker的区别\" class=\"headerlink\" title=\"PyLint与PyChecker的区别\"></a>PyLint与PyChecker的区别</h1><p>PyLint支持PyChecker提供的大部分功能，他们之间一个最主要的区别在于PyLint能够检测编码标准是否规范，其次，PyLint不支持导入活动模块而PyChecker可以。</p>\n<h1 id=\"PEP-8标准\"><a href=\"#PEP-8标准\" class=\"headerlink\" title=\"PEP 8标准\"></a>PEP 8标准</h1><h2 id=\"代码布局\"><a href=\"#代码布局\" class=\"headerlink\" title=\"代码布局\"></a>代码布局</h2><ul>\n<li><p>每个缩进级别使用4个空格，连续行使用垂直对齐或者使用悬挂式缩进(额外的4个空格缩进)；</p>\n</li>\n<li><p>空格是首选的缩进方法；</p>\n</li>\n<li><p>每行最多79个字符；</p>\n</li>\n<li><p>允许在二元运算符前后换行，但代码需保持一致，对于新代码建议在二元运算符前进行换行；</p>\n</li>\n<li><p>使用两个空白行分隔顶层函数和类定义；</p>\n</li>\n<li><p>类方法定义使用一个空行分隔；</p>\n</li>\n<li><p>使用额外的空白行来分隔相关逻辑功能；</p>\n</li>\n<li><p>文件应该使用UTF-8编码，且不应该有编码声明；</p>\n</li>\n<li><p>导入多个库函数应该分开依次导入，导入总是放在文件的顶部，在任何模块注释和文档字符串之后，在模块全局变量和常量之前；导入应按以下顺序进行：标准库导入、有关的第三方库导入、本地应用程序&#x2F;库特定的导入，每组导入直接用空行分隔；避免通配符导入（import *）。</p>\n</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><ul>\n<li><p>单引号字符串和双引号字符串相同，但代码需保持一致；</p>\n</li>\n<li><p>对于三引号字符串，常用三个双引号作文档字符串，文档字符串常用在模块的开端用以说明模块的基本功能，或紧跟函数定义的后面用以说明函数的基本功能。</p>\n</li>\n</ul>\n<h2 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h2><ul>\n<li><p>避免使用无关的空格，包括空格内、逗号分号前面等；</p>\n</li>\n<li><p>避免在行末使用空格；</p>\n</li>\n<li><p>二元运算符在两侧使用一个空格；</p>\n</li>\n<li><p>当用于指示关键字参数或默认参数值时，不要在&#x3D;符号周围使用空格。</p>\n</li>\n</ul>\n<h2 id=\"使用尾部逗号-trailing-commas\"><a href=\"#使用尾部逗号-trailing-commas\" class=\"headerlink\" title=\"使用尾部逗号(trailing commas)\"></a>使用尾部逗号(trailing commas)</h2><ul>\n<li><p>尾部逗号通常可选，但对于只有一个元素的元组是必选的；</p>\n</li>\n<li><p>当参数、值等列表期望经常扩展时，通常是每个值一行，再加上一个尾部逗号。</p>\n</li>\n</ul>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ul>\n<li><p>代码更改时，相应的注释也要随之更改；</p>\n</li>\n<li><p>注释应该是完整的语句，第一个单词应该大写，除非它是特定标识符；</p>\n</li>\n<li><p>块注释：缩进到与该代码相同的级别，块注释的每一行都以＃和一个空格开始；</p>\n</li>\n<li><p>行注释：对某一语句行进行注释，注释应该与语句至少隔开两个空格，用＃和一个空格开始；</p>\n</li>\n<li><p>对于公共的模块，功能，类和方法需要为其写文档字符串；</p>\n</li>\n<li><p>注释应该是完整的语句，第一个单词应该大写，除非它是特定标识符。</p>\n</li>\n</ul>\n<h2 id=\"命名约定\"><a href=\"#命名约定\" class=\"headerlink\" title=\"命名约定\"></a>命名约定</h2><ul>\n<li><p>命名应该反映其用途而非实现；</p>\n</li>\n<li><p>不要将字符’l’（小写字母L），’O’（大写字母O）或’I’（大写字母I）作为单个字符变量名称；</p>\n</li>\n<li><p>模块名应该使用简短、全小写的名字；</p>\n</li>\n<li><p>类的命名采用驼峰命名法，即每个单词的首字母大写；</p>\n</li>\n<li><p>函数名称应该是小写的，为了提高可读性，必须使用由下划线分隔的单词。</p>\n</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://www.pylint.org/\">PyLint官网链接</a>；</p>\n<p><a href=\"https://pep8.org/\">PEP 8编码规范</a>。</p>\n","categories":["Python"]},{"title":"使用Python实现多线程、多进程、异步IO的socket通信","url":"/2022/11/28/22-05-30/","content":"<h1 id=\"多线程实现socket通信服务器端代码\"><a href=\"#多线程实现socket通信服务器端代码\" class=\"headerlink\" title=\"多线程实现socket通信服务器端代码\"></a>多线程实现socket通信服务器端代码</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyServer</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 初始化socket</span></span><br><span class=\"line\">        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        <span class=\"comment\"># 设置服务器IP地址</span></span><br><span class=\"line\">        host = <span class=\"string\">&#x27;192.168.152.1&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\"># 设置服务器端口号</span></span><br><span class=\"line\">        port = <span class=\"number\">4321</span></span><br><span class=\"line\">        <span class=\"comment\"># 绑定IP地址和端口</span></span><br><span class=\"line\">        self.server.bind((host, port))</span><br><span class=\"line\">        <span class=\"comment\"># 设置最大监听数</span></span><br><span class=\"line\">        self.server.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 设置一个字典，用来保存每一个客户端的连接和身份信息</span></span><br><span class=\"line\">        self.socket_mapping = &#123;&#125;</span><br><span class=\"line\">        <span class=\"comment\"># 设置接收的最大字节数</span></span><br><span class=\"line\">        self.maxSize = <span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            socket, addr = self.server.accept()</span><br><span class=\"line\">            <span class=\"comment\"># 发送信息，提示客户端已成功连接</span></span><br><span class=\"line\">            socket.send(<span class=\"string\">&#x27;success！&#x27;</span>.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">            <span class=\"comment\"># 将客户端socket等信息存入字典</span></span><br><span class=\"line\">            self.socket_mapping[socket] = addr</span><br><span class=\"line\">            <span class=\"comment\"># 创建线程，负责获取键盘输入并发送给客户端</span></span><br><span class=\"line\">            threading.Thread(target=self.send_to_client, args=(socket,)).start()</span><br><span class=\"line\">            <span class=\"comment\"># 创建线程，负责接收客户端信息并转发给其他客户端</span></span><br><span class=\"line\">            threading.Thread(target=self.recv_from_client, args=(socket,)).start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_to_client</span>(<span class=\"params\">self, socket</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        获取键盘输入并发送给客户端</span></span><br><span class=\"line\"><span class=\"string\">        :param socket:</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            info = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> info == <span class=\"string\">&quot;quit&quot;</span>:</span><br><span class=\"line\">                socket.close()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> socket <span class=\"keyword\">in</span> self.socket_mapping.keys():</span><br><span class=\"line\">                socket.send(info.encode(<span class=\"string\">&quot;utf-8&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">recv_from_client</span>(<span class=\"params\">self, socket</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        接收客户端信息并转发给其他客户端</span></span><br><span class=\"line\"><span class=\"string\">        :param socket:</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            recv_info = socket.recv(self.maxSize).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;client&#123;&#125; say: &#x27;</span>.<span class=\"built_in\">format</span>(self.socket_mapping[socket]), recv_info)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i_socket <span class=\"keyword\">in</span> self.socket_mapping.keys():</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i_socket != socket:</span><br><span class=\"line\">                    i_socket.send(recv_info.encode(<span class=\"string\">&quot;utf-8&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">my_server = MyServer()</span><br><span class=\"line\">my_server.run()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"多进程实现socket通信服务器端代码\"><a href=\"#多进程实现socket通信服务器端代码\" class=\"headerlink\" title=\"多进程实现socket通信服务器端代码\"></a>多进程实现socket通信服务器端代码</h1><p>存在的问题：在与客户端连通后，需要服务器先发送两条消息，之后才能正常通信。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process, Manager</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyServer</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 初始化socket</span></span><br><span class=\"line\">        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        <span class=\"comment\"># 设置服务器IP地址</span></span><br><span class=\"line\">        host = <span class=\"string\">&#x27;192.168.152.1&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\"># 设置服务器端口号</span></span><br><span class=\"line\">        port = <span class=\"number\">4321</span></span><br><span class=\"line\">        <span class=\"comment\"># 绑定IP地址和端口</span></span><br><span class=\"line\">        self.server.bind((host, port))</span><br><span class=\"line\">        <span class=\"comment\"># 设置最大监听数</span></span><br><span class=\"line\">        self.server.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 设置一个字典，用来保存每一个客户端的连接和身份信息</span></span><br><span class=\"line\">        self.socket_mapping = Manager().<span class=\"built_in\">dict</span>()</span><br><span class=\"line\">        <span class=\"comment\"># 设置接收的最大字节数</span></span><br><span class=\"line\">        self.maxSize = <span class=\"number\">1024</span></span><br><span class=\"line\">        <span class=\"comment\"># 进程锁</span></span><br><span class=\"line\">        self.share_lock = Manager().Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        fn = sys.stdin.fileno()</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            socket, addr = self.server.accept()</span><br><span class=\"line\">            <span class=\"comment\"># 发送信息，提示客户端已成功连接</span></span><br><span class=\"line\">            socket.send(<span class=\"string\">&#x27;success！&#x27;</span>.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">            <span class=\"comment\"># 将客户端socket等信息存入字典</span></span><br><span class=\"line\">            self.modify_mapping(self.socket_mapping, addr, socket, self.share_lock)</span><br><span class=\"line\">            <span class=\"comment\"># 创建进程，负责获取键盘输入并发送给客户端</span></span><br><span class=\"line\">            Process(target=self.send_to_client, args=(addr, fn)).start()</span><br><span class=\"line\">            <span class=\"comment\"># 创建进程，负责接收客户端信息并转发给其他客户端</span></span><br><span class=\"line\">            Process(target=self.recv_from_client, args=(addr,)).start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_to_client</span>(<span class=\"params\">self, addr, fn</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        获取键盘输入并发送给客户端</span></span><br><span class=\"line\"><span class=\"string\">        :param addr:</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        sys.stdin = os.fdopen(fn)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            info = sys.stdin.readline()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> info == <span class=\"string\">&quot;quit&quot;</span>:</span><br><span class=\"line\">                self.socket_mapping[addr].close()</span><br><span class=\"line\">            <span class=\"keyword\">for</span> socket <span class=\"keyword\">in</span> self.socket_mapping.values():</span><br><span class=\"line\">                socket.send(info.encode(<span class=\"string\">&quot;utf-8&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">recv_from_client</span>(<span class=\"params\">self, addr</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        接收客户端信息并转发给其他客户端</span></span><br><span class=\"line\"><span class=\"string\">        :param addr:</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            recv_info = self.socket_mapping.get(addr).recv(self.maxSize).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;client&#123;&#125; say: &#x27;</span>.<span class=\"built_in\">format</span>(addr), recv_info)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i_addr <span class=\"keyword\">in</span> self.socket_mapping.keys():</span><br><span class=\"line\">                <span class=\"keyword\">if</span> i_addr != addr:</span><br><span class=\"line\">                    self.socket_mapping.get(i_addr).send(recv_info.encode(<span class=\"string\">&quot;utf-8&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">modify_mapping</span>(<span class=\"params\">share_var, share_key, share_value, share_lock</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 获取锁</span></span><br><span class=\"line\">        share_lock.acquire()</span><br><span class=\"line\">        <span class=\"comment\"># 修改数据</span></span><br><span class=\"line\">        share_var[share_key] = share_value</span><br><span class=\"line\">        <span class=\"comment\"># 释放锁</span></span><br><span class=\"line\">        share_lock.release()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    my_server = MyServer()</span><br><span class=\"line\">    my_server.run()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"异步IO实现socket通信服务器端代码\"><a href=\"#异步IO实现socket通信服务器端代码\" class=\"headerlink\" title=\"异步IO实现socket通信服务器端代码\"></a>异步IO实现socket通信服务器端代码</h1><p>存在的问题：通信时需要相互发送几次消息后，各自才会收到之前的消息并打印。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> select</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyServer</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 初始化socket</span></span><br><span class=\"line\">        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        <span class=\"comment\"># 设置服务器IP地址</span></span><br><span class=\"line\">        host = <span class=\"string\">&#x27;192.168.152.1&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\"># 设置服务器端口号</span></span><br><span class=\"line\">        port = <span class=\"number\">4321</span></span><br><span class=\"line\">        <span class=\"comment\"># 绑定IP地址和端口</span></span><br><span class=\"line\">        self.server.bind((host, port))</span><br><span class=\"line\">        <span class=\"comment\"># 设置最大监听数</span></span><br><span class=\"line\">        self.server.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 设置一个字典，用来保存每一个客户端的连接和身份信息</span></span><br><span class=\"line\">        self.socket_mapping = &#123;self.server: <span class=\"literal\">None</span>&#125;  <span class=\"comment\"># 这里存入self.server是为了充当select.select参数</span></span><br><span class=\"line\">        <span class=\"comment\"># 设置接收的最大字节数</span></span><br><span class=\"line\">        self.maxSize = <span class=\"number\">1024</span></span><br><span class=\"line\">        <span class=\"comment\"># 进入事件循环</span></span><br><span class=\"line\">        self.loop = asyncio.get_event_loop()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"comment\"># select监听请求对象</span></span><br><span class=\"line\">            rret, _, _ = select.select(self.socket_mapping.keys(), [], [])</span><br><span class=\"line\">            <span class=\"keyword\">for</span> r_socket <span class=\"keyword\">in</span> rret:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> r_socket <span class=\"keyword\">is</span> self.server:</span><br><span class=\"line\">                    socket, addr = r_socket.accept()</span><br><span class=\"line\">                    <span class=\"comment\"># 发送信息，提示客户端已成功连接</span></span><br><span class=\"line\">                    socket.send(<span class=\"string\">&#x27;success！&#x27;</span>.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">                    <span class=\"comment\"># 将客户端socket等信息存入字典</span></span><br><span class=\"line\">                    self.socket_mapping[socket] = addr</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    task = [self.send_to_client(r_socket), self.recv_from_client(r_socket)]</span><br><span class=\"line\">                    self.loop.run_until_complete(asyncio.gather(*task))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">send_to_client</span>(<span class=\"params\">self, socket</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        获取键盘输入并发送给客户端</span></span><br><span class=\"line\"><span class=\"string\">        :param socket:</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        info = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> info == <span class=\"string\">&quot;quit&quot;</span>:</span><br><span class=\"line\">            socket.close()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> socket <span class=\"keyword\">in</span> self.socket_mapping.keys():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> socket != self.server:</span><br><span class=\"line\">                socket.send(info.encode(<span class=\"string\">&quot;utf-8&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">recv_from_client</span>(<span class=\"params\">self, socket</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        接收客户端信息并转发给其他客户端</span></span><br><span class=\"line\"><span class=\"string\">        :param socket:</span></span><br><span class=\"line\"><span class=\"string\">        :return:</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        recv_info = socket.recv(self.maxSize).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;client&#123;&#125; say: &#x27;</span>.<span class=\"built_in\">format</span>(self.socket_mapping[socket]), recv_info)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i_socket <span class=\"keyword\">in</span> self.socket_mapping.keys():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i_socket != socket <span class=\"keyword\">and</span> i_socket != self.server:</span><br><span class=\"line\">                i_socket.send(recv_info.encode(<span class=\"string\">&quot;utf-8&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">my_server = MyServer()</span><br><span class=\"line\">my_server.run()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"客户端代码（使用多线程）\"><a href=\"#客户端代码（使用多线程）\" class=\"headerlink\" title=\"客户端代码（使用多线程）\"></a>客户端代码（使用多线程）</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClient</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 初始化socket</span></span><br><span class=\"line\">        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        <span class=\"comment\"># 设置服务器IP地址</span></span><br><span class=\"line\">        self.host = <span class=\"string\">&#x27;192.168.152.1&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\"># 设置服务器端口号</span></span><br><span class=\"line\">        self.port = <span class=\"number\">4321</span></span><br><span class=\"line\">        <span class=\"comment\"># 设置接收的最大字节数</span></span><br><span class=\"line\">        self.max_size = <span class=\"number\">1024</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">run</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 与服务器建立连接</span></span><br><span class=\"line\">        self.client.connect((self.host, self.port))</span><br><span class=\"line\">        <span class=\"comment\"># 创建线程，负责获取键盘输入并发送给服务器</span></span><br><span class=\"line\">        threading.Thread(target=self.sned_to_server).start()</span><br><span class=\"line\">        <span class=\"comment\"># 创建线程，接收服务器信息</span></span><br><span class=\"line\">        threading.Thread(target=self.recv_from_server).start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sned_to_server</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        获取键盘输入并发送给服务器</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            send_msg = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">            self.client.send(send_msg.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> send_msg == <span class=\"string\">&#x27;quit&#x27;</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        self.client.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">recv_from_server</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        接收服务器信息</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            recv_info = self.client.recv(self.max_size).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;server&#123;&#125; say: &#x27;</span>.<span class=\"built_in\">format</span>((self.host, self.port)), recv_info)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">my_client = MyClient()</span><br><span class=\"line\">my_client.run()</span><br></pre></td></tr></table></figure>\n\n","categories":["网络编程"]},{"title":"初学LSTM","url":"/2022/11/24/14-45-24/","content":"","categories":["NLP"]},{"title":"使用RNN实现文本生成","url":"/2022/11/30/14-21-44/","content":""},{"title":"初学RNN","url":"/2022/11/15/21-46-57/","content":"<h1 id=\"FNN\"><a href=\"#FNN\" class=\"headerlink\" title=\"FNN\"></a>FNN</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>FNN（Feedforward Neural Network），即前馈神经网络，它是网络信息单向传递的一种神经网络，数据由输入层开始输入，依次流入隐藏层各层神经元，最终由输出层输出。其当前的输出只由当前的输入决定，任何层的输出都不会影响同级层。</p>\n<div align=\"center\"> \n<img src=\"/2022/11/15/21-46-57/前馈神经网络-导出.png\" width=\"60%\"> \n</div> \n\n<p>以上图所示的神经网络为例，它在训练过程中通过前向计算和反向传播，不断通过调整权重系数W<sub>i</sub>和W<sub>o</sub>来实现学习目的。通常情况下，前馈神经网络会在空间上进行延伸，通过增加隐藏层层数与隐藏层神经元个数追求更好的学习效果。</p>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><p>前馈神经网络假定元素之间是相互独立的，对于序列数据，只能单独地处理序列中的每个元素，前一个输入与后一个输入在处理过程中也是完全独立的，无法捕获序列之间的依赖关系。</p>\n<h1 id=\"RNN\"><a href=\"#RNN\" class=\"headerlink\" title=\"RNN\"></a>RNN</h1><h2 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>RNN（Recurrent Neural Network），即循环神经网络，它是一种主要用来处理序列数据的神经网络，它关注了隐藏层每个神经元在时间维度上的变化，其中循环说成递推可能会更直观一些，本质就是同一个网络接收当前时刻的输入和上一时刻隐藏层神经元的输出，沿着时序反复迭代以实现对序列数据的学习。</p>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><h3 id=\"直观结构\"><a href=\"#直观结构\" class=\"headerlink\" title=\"直观结构\"></a>直观结构</h3><div align=\"center\"> \n<img src=\"/2022/11/15/21-46-57/RNN-导出.png\" width=\"60%\"> \n</div> \n\n<p>在上图中， RNN 的每个时刻，输入层的x<sub>1</sub>和x<sub>2</sub>都在W<sub>i</sub>的作用下传入隐藏层，上一时刻的隐藏层输出也通过W<sub>h</sub>传入当前的隐藏层，因此它相当于可以间接访问之前的所有输入，这就是为什么说RNN可以保存记忆。</p>\n<h3 id=\"内部结构\"><a href=\"#内部结构\" class=\"headerlink\" title=\"内部结构\"></a>内部结构</h3><div align=\"center\"> \n<img src=\"/2022/11/15/21-46-57/rnn.svg\" width=\"100%\"> \n</div> \n\n<p>上图展示了RNN在三个相邻时刻的计算逻辑。 在任意时刻t，隐藏层状态的计算可以被视为：</p>\n<ol>\n<li>拼接t时刻的输入X<sub>t</sub>和t−1时刻的隐藏层状态H<sub>t−1</sub>，得到新的张量[X<sub>t</sub>,H<sub>t-1</sub>]；</li>\n<li>将新的张量送入带有激活函数φ的全连接层，激活函数常用tanh或者relu， 全连接层的输出是t时刻的隐藏层状态H<sub>t</sub>。</li>\n</ol>\n<p>在t时刻，隐藏层状态H<sub>t</sub>的计算公式为：</p>\n<div align=\"center\"> \n<img src=\"/2022/11/15/21-46-57/H公式.png\" width=\"100%\"> \n</div> \n\n<p>在t时刻，输出层的输出计算公式为：</p>\n<div align=\"center\"> \n<img src=\"/2022/11/15/21-46-57/O公式.png\" width=\"100%\"> \n</div> \n\n<p>参数说明：</p>\n<ul>\n<li>X<sub>t</sub>是t时刻的输入，它是一个向量；</li>\n<li>W<sub>i</sub>是输入层到隐藏层的权重矩阵；</li>\n<li>H<sub>t-1</sub>是t-1时刻的隐藏层状态，在初始时刻，会给隐藏层设置初始状态H<sub>0</sub>；</li>\n<li>W<sub>h</sub>是隐藏层上一时刻的值作用于当前时刻的权重矩阵；</li>\n<li>W<sub>o</sub>是隐藏层到输出层的权重矩阵；</li>\n<li>b<sub>h</sub>是和b<sub>o</sub>是偏置系数。</li>\n</ul>\n<p>注意：</p>\n<ul>\n<li>在不同时刻，RNN总是使用这些模型参数，其参数开销不会随着时间的增加而增加。</li>\n<li>隐藏层状态中X<sub>t</sub>W<sub>i</sub>+H<sub>t-1</sub>W<sub>h</sub>的计算，相当于X<sub>t</sub>和H<sub>t-1</sub>的拼接与W<sub>i</sub>和W<sub>h</sub>的拼接进行矩阵乘法。</li>\n<li>RNN和前馈神经网络一样，也是通过反向传播来更新权重，以达到学习的效果。</li>\n</ul>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>1-N类型，输入一张图片，输出一段话或者一段音乐，利用它可以实现看图说话。</p>\n<div align=\"center\"> \n<img src=\"/2022/11/15/21-46-57/1-N.png\" width=\"50%\"> \n</div> \n\n<p>N-1类型，输入一段话，输出对其情感类别的判断，利用它可以实现文本分类。</p>\n<div align=\"center\"> \n<img src=\"/2022/11/15/21-46-57/N-1.png\" width=\"50%\"> \n</div> \n\n<p>N-N类型，输入和输出是等长的序列，可以用来生成等长的诗歌。</p>\n<div align=\"center\"> \n<img src=\"/2022/11/15/21-46-57/N-N.png\" width=\"50%\"> \n</div> \n\n<p>N-M类型，输入和输出是不等长的序列，也被叫做Encoder-Decoder模型或Seq2Seq模型，可以应用在机器翻译、文本摘要、阅读理解等多个领域上。</p>\n<div align=\"center\"> \n<img src=\"/2022/11/15/21-46-57/N-M.png\" width=\"50%\"> \n</div> \n\n<div align=\"center\"> \n<img src=\"/2022/11/15/21-46-57/N-M2.png\" width=\"90%\"> \n</div> \n\n<h2 id=\"变体\"><a href=\"#变体\" class=\"headerlink\" title=\"变体\"></a>变体</h2><h3 id=\"BRNN（Bidirectional-RNN）\"><a href=\"#BRNN（Bidirectional-RNN）\" class=\"headerlink\" title=\"BRNN（Bidirectional RNN）\"></a>BRNN（Bidirectional RNN）</h3><div align=\"center\"> \n<img src=\"/2022/11/15/21-46-57/BRNN.png\" width=\"100%\"> \n</div> \n\n<p>RNN的一个主要问题是只能从以往的输入进行学习，也就是只能理解上下文中的上文，为了拥有更好的学习效果，因此提出了双向RNN，也就是BRNN。 BRNN会在原有RNN的基础上再加一个隐藏层，该隐藏层的状态是从后向前传播的，从序列的终点开始读取，称为后向层；而原有的从序列起点开始读取的隐藏层称为前向层。 BRNN的隐藏层状态的计算可以被视为：</p>\n<ol>\n<li>根据输入序列计算前向层隐藏层状态H<sub>1</sub>；</li>\n<li>将输入序列反转，计算后向层隐藏层状态H<sub>2</sub>；</li>\n<li>将H<sub>1</sub>和H<sub>2</sub>拼接起来，得到最终隐藏层状态H，H&#x3D;[H<sub>1</sub>,H<sub>2</sub>]。</li>\n</ol>\n<p>注意，只有能拿到整个输入序列时才能使用BRNN 。</p>\n<h3 id=\"DRNN（Deep-RNN）\"><a href=\"#DRNN（Deep-RNN）\" class=\"headerlink\" title=\"DRNN（Deep RNN）\"></a>DRNN（Deep RNN）</h3><div align=\"center\"> \n<img src=\"/2022/11/15/21-46-57/DRNN.png\" width=\"50%\"> \n</div> \n\n<p>与前馈神经网络不同，RNN因为考虑了时间维度，隐藏层达到三层就算多的了。</p>\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>RNN可以处理序列信息，且内部结构简单，对计算资源的要求低。</li>\n</ul>\n<h3 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li><p>RNN是一个时序模型，每个时刻的计算都依赖于前一时刻的结果，计算速度慢；</p>\n</li>\n<li><p>RNN由于梯度消失，难以支持长序列，不能捕获序列中长期的依赖关系；</p>\n</li>\n<li><p>RNN网络在时间维度上是串联的，离当前时间越远的隐藏层输出，对当前隐藏层的输出影响越小，它无法根据不同词本身的重要性对当前的输出产生影响；</p>\n</li>\n<li><p>RNN对所有输入是同等对待的，提取了所有的信息，没有区分有用信息、无用信息和辅助信息。但是如果某个网络可以根据不同输入的重要性，选择性地丢弃和记忆，就可以使得有效信息即使距离当前时间较远，也能有较大影响，实现长期记忆，这就引出了LSTM。</p>\n</li>\n</ul>\n<h1 id=\"主要参考\"><a href=\"#主要参考\" class=\"headerlink\" title=\"主要参考\"></a>主要参考</h1><ul>\n<li><a href=\"https://zh-v2.d2l.ai/chapter_recurrent-neural-networks/rnn.html#subsec-rnn-w-hidden-states\">《动手学深度学习》第8章第4节</a>；</li>\n<li>网络上相关资料。</li>\n</ul>\n","categories":["NLP"]},{"title":"AngularJS——初识AngularJS","url":"/2023/01/13/19-06-08/","content":"<h1 id=\"AngularJS——初识AngularJS\"><a href=\"#AngularJS——初识AngularJS\" class=\"headerlink\" title=\"AngularJS——初识AngularJS\"></a>AngularJS——初识AngularJS</h1><h2 id=\"AngularJS是什么\"><a href=\"#AngularJS是什么\" class=\"headerlink\" title=\"AngularJS是什么\"></a>AngularJS是什么</h2><p>AngularJS是Google开源的一款前端JS结构化框架，它通过对前端开发进行分层，极好地规范了前端开发的风格——它将前端开发分为Controller层、Service层、DAO层和Model层。其中，Model对象与HTML页面（视图）上HTML元素进行双向绑定，开发者可通过Controller调用Service、DAO与后端交互，获取后端数据之后，只要修改其中Model对象的值，视图页面也会随之动态改变。这个设计架构层次非常清晰，而且具有一定的“强制性”，整个前端团队一旦采用AngularJS框架，那么整个前端开发风格会变得简单、清晰，所有团队成员都能采用一致的开发风格，这也是AngularJS的魅力所在。</p>\n<h2 id=\"AngularJS特性-优点\"><a href=\"#AngularJS特性-优点\" class=\"headerlink\" title=\"AngularJS特性(优点)\"></a>AngularJS特性(优点)</h2><ul>\n<li>双向数据绑定；</li>\n<li>声明式依赖注入；</li>\n<li>解耦应用逻辑、数据模型和视图；</li>\n<li>完善的页面指令；</li>\n<li>定制表单验证；</li>\n<li>Ajax封装。</li>\n</ul>\n<h2 id=\"与jQuery的比较\"><a href=\"#与jQuery的比较\" class=\"headerlink\" title=\"与jQuery的比较\"></a>与jQuery的比较</h2><p>jQuery</p>\n<ul>\n<li>JS函数库；</li>\n<li>封装简化DOM操作。</li>\n</ul>\n<p>AngularJS</p>\n<ul>\n<li>JS结构化框架；</li>\n<li>主体不再是DOM，而是页面中的动态数据。</li>\n</ul>\n<h2 id=\"AngularJS的应用\"><a href=\"#AngularJS的应用\" class=\"headerlink\" title=\"AngularJS的应用\"></a>AngularJS的应用</h2><p>构建单页面（single page application，SPA）Web应用或Web APP应用。</p>\n<h3 id=\"单页面应用（single-page-application）\"><a href=\"#单页面应用（single-page-application）\" class=\"headerlink\" title=\"单页面应用（single page application）\"></a>单页面应用（single page application）</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>将所有的活动局限于一个页面，浏览器一开始就加载网页所有内容，当页面中有部分数据发生了变化，不会刷新整个页面，而是局部刷新（利用的Ajax技术）。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>用户体验好，内容的改变不需要重新加载整个页面；</li>\n<li>适合前后端分离开发，服务器只出数据，减轻了服务器压力。</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>首屏加载速度慢；</li>\n<li>不利于SEO优化。</li>\n</ul>\n<h2 id=\"AngularJS的组成\"><a href=\"#AngularJS的组成\" class=\"headerlink\" title=\"AngularJS的组成\"></a>AngularJS的组成</h2><ul>\n<li>ng-app : 该指令用于设置AngularJS应用。例如为＜body…&#x2F;＞元素增加了ng-app属性，这意味着所有AngularJS应用处于＜body…&#x2F;＞元素内。在＜body…&#x2F;＞元素内可使用其他AngularJS指令，也可使用&#x2F;{&#x2F;{&#x2F;}&#x2F;}来输出表达式。</li>\n<li>ng-model : 该指令用于执行“双向绑定”，所谓双向绑定指的是将HTML输入元素的值与AngularJS应用的某个变量进行绑定。完成“双向绑定”之后，当HTML输入元素的值发生改变时，AngularJS应用中绑定的变量的值也会随之改变；反过来，当程序修改AngularJS应用的变量的值时，HTML输入元素的值也会随之改变。</li>\n<li>ng-bind : 该指令用于绑定ng-model的数据。</li>\n</ul>\n<h2 id=\"下载AngularJS\"><a href=\"#下载AngularJS\" class=\"headerlink\" title=\"下载AngularJS\"></a>下载AngularJS</h2><p>AngularJS也是一个纯粹的JavaScript库，下载AngularJS与下载其它JavaScript库一样，打开链接后，选中相应的版本下载即可。<a href=\"https://code.angularjs.org/\">下载链接</a></p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>AngularJS是AngularJS 1.X，并不是Angular 2.X（Angular 2没有JS后缀）；</li>\n<li>AngularJS 1.X是真正轻量级JavaScript框架，比较适合熟悉JavaScript的前端开发者；</li>\n<li>Angular 2.X使用的是TypeScript脚本，其开发高度依赖Node.js。</li>\n</ul>\n<h3 id=\"版本选择\"><a href=\"#版本选择\" class=\"headerlink\" title=\"版本选择\"></a>版本选择</h3><ul>\n<li><strong>angular.min.js</strong>：该版本是去除注释后的AngularJS库，文件体积较小，开发实际项目时推荐使用该版本。</li>\n<li><strong>angular.js</strong>：该版本的AngularJS库没有压缩，而且保留了注释。学习AngularJS及有兴趣研究AngularJS源代码的读者可以使用该版本。</li>\n<li><strong>angular-xxx.min.js</strong>：AngularJS为特定功能提供的支持库。比如angular-animate.min.js就是AngularJS的动画支持库；angular-cookies.min.js就是AngularJS的Cookie访问支持库。</li>\n<li><strong>angular-xxx.js</strong>：与对应的angular-xxx-min.js库的功能相同，只是保留了注释，没有压缩。</li>\n</ul>\n<h2 id=\"安装AngularJS\"><a href=\"#安装AngularJS\" class=\"headerlink\" title=\"安装AngularJS\"></a>安装AngularJS</h2><p>AngularJS库的安装很简单，只要在HTML页面中导入AngularJS的JavaScript文件即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;angular.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中，src 属性为待导入的AngularJS文件。</p>\n<h2 id=\"第一个AngularJS应用\"><a href=\"#第一个AngularJS应用\" class=\"headerlink\" title=\"第一个AngularJS应用\"></a>第一个AngularJS应用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head lang=&quot;en&quot;&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../../js/angular-1.2.29/angular.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;title&gt;第一个程序&lt;/title&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body ng-app&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; ng-model=&quot;mymodel&quot; /&gt;</span><br><span class=\"line\">    &lt;p&gt;您输入的内容是：&lt;span&gt;&#123;&#123;mymodel&#125;&#125;&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n","categories":["AngularJS"]},{"title":"初识Flask","url":"/2023/01/30/20-31-07/","content":"<h1 id=\"初识Flask\"><a href=\"#初识Flask\" class=\"headerlink\" title=\"初识Flask\"></a>初识Flask</h1><h2 id=\"Flask简介\"><a href=\"#Flask简介\" class=\"headerlink\" title=\"Flask简介\"></a>Flask简介</h2><p>Flask是一个基于Python的web框架，由奥地利开发商Armin Ronacher于2010年4月1日发布。它以灵活、“微”框架著称，其本身并不具备太多的功能，但通过丰富的第三方插件，使其在保持重量轻和简单的同时仍然可以进行高度扩展，让开发者能轻松应对现实开发中复杂的需求。</p>\n<h2 id=\"Flask-vs-Django\"><a href=\"#Flask-vs-Django\" class=\"headerlink\" title=\"Flask vs Django\"></a>Flask vs Django</h2><ul>\n<li>Django功能大而全，Flask只包含基本的配置；</li>\n<li>Flask 比 Django 扩展性更好。</li>\n</ul>\n<h2 id=\"安装Flask\"><a href=\"#安装Flask\" class=\"headerlink\" title=\"安装Flask\"></a>安装Flask</h2><p>打开cmd窗口，执行如下指令即可安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install flask -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>\n\n<p>执行如下指令查看是否安装成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip list</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第一个Flask项目（使用Pycharm）\"><a href=\"#第一个Flask项目（使用Pycharm）\" class=\"headerlink\" title=\"第一个Flask项目（使用Pycharm）\"></a>第一个Flask项目（使用Pycharm）</h2><p>打开PyCharm，选择New Project新建一个项目，之后点击左侧Flask，再选择项目存放路径以及Python解释器路径，点击Create即可。</p>\n<p><img src=\"/2023/01/30/20-31-07/01.png\" alt=\"01\"></p>\n<p>创建成功后，项目结构如下。</p>\n<p>flask_01<br>│  app.py：项目入口文件。<br>├─static：存放静态文件（js、css、image等）的文件夹，初始为空。<br>└─templates：存Jinjia2模板的文件夹，初始为空。</p>\n<p><img src=\"/2023/01/30/20-31-07/02.png\" alt=\"02\"></p>\n<p>app.py初始内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask  # 从flask包中导入Flask类</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)  # 实例化Flask类</span><br><span class=\"line\"># __name__：代表当前app.py这个模块，其作用为 1.以后出现bug，可以帮助我们快速定位；2.对于寻找模板文件，有一个相对路径</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/&#x27;)  # 创建一个路由和视图函数的映射，/代表根路由</span><br><span class=\"line\">def hello_world():  # 当访问根路由时会执行此函数</span><br><span class=\"line\">    return &#x27;Hello World!&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    app.run()  # 运行项目</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目配置\"><a href=\"#项目配置\" class=\"headerlink\" title=\"项目配置\"></a>项目配置</h2><h3 id=\"debug模式\"><a href=\"#debug模式\" class=\"headerlink\" title=\"debug模式\"></a>debug模式</h3><p>开启debug模式后，只要修改代码后保存，项目就会重新加载，无需手动重启项目，且开发时如果遇到bug，可以在浏览器上看到出错信息。</p>\n<h4 id=\"设置方法\"><a href=\"#设置方法\" class=\"headerlink\" title=\"设置方法\"></a>设置方法</h4><h5 id=\"法一\"><a href=\"#法一\" class=\"headerlink\" title=\"法一\"></a>法一</h5><p>首先点击Edit Configurations。</p>\n<p><img src=\"/2023/01/30/20-31-07/03.png\" alt=\"1675092550816\"></p>\n<p>勾选FLASK_DEBUG后，点击OK即可。</p>\n<p><img src=\"/2023/01/30/20-31-07/04.png\" alt=\"04\"></p>\n<h5 id=\"法二\"><a href=\"#法二\" class=\"headerlink\" title=\"法二\"></a>法二</h5><p>在app.run()  中添加debug&#x3D;True。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.run(debug=True)  # 运行项目</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改host\"><a href=\"#修改host\" class=\"headerlink\" title=\"修改host\"></a>修改host</h3><p>host即为监听的主机名，默认为127.0.0.1，修改host可以让其它电脑也能访问到本电脑的flask项目，修改步骤如下。</p>\n<p>点击Edit Configurations。</p>\n<p><img src=\"/2023/01/30/20-31-07/03.png\" alt=\"03\"></p>\n<p>在Additional options处填写预设的host值，然后点击OK即可。</p>\n<p><img src=\"/2023/01/30/20-31-07/05.png\" alt=\"05\"></p>\n<h3 id=\"修改port\"><a href=\"#修改port\" class=\"headerlink\" title=\"修改port\"></a>修改port</h3><p>port即为端口号，若要修改，同样在Additional options处修改即可。</p>\n<p><img src=\"/2023/01/30/20-31-07/06.png\" alt=\"06\"></p>\n<h2 id=\"URL与视图\"><a href=\"#URL与视图\" class=\"headerlink\" title=\"URL与视图\"></a>URL与视图</h2><h3 id=\"URL格式\"><a href=\"#URL格式\" class=\"headerlink\" title=\"URL格式\"></a>URL格式</h3><p>协议:&#x2F;&#x2F;域名:端口号&#x2F;path，其中，path通过app.route()指定。</p>\n<h3 id=\"URL与视图的关系\"><a href=\"#URL与视图的关系\" class=\"headerlink\" title=\"URL与视图的关系\"></a>URL与视图的关系</h3><p>在URL中，http协议默认端口为80，https协议默认端口为443，在实际使用中默认端口号可以不填写，下方两个URL均能正确访问到百度地址。</p>\n<p><a href=\"https://www.baidu.com/\">https://www.baidu.com</a>   </p>\n<p><a href=\"https://www.baidu.com/\">https://www.baidu.com:443</a></p>\n<h3 id=\"定义无参数的URL\"><a href=\"#定义无参数的URL\" class=\"headerlink\" title=\"定义无参数的URL\"></a>定义无参数的URL</h3><p>敲写下方代码，程序运行后，可通过  127.0.0.1:8888&#x2F;home  访问。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@app.route(&#x27;/home&#x27;)</span><br><span class=\"line\">def home():</span><br><span class=\"line\">    return &#x27;home&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义有参数的URL\"><a href=\"#定义有参数的URL\" class=\"headerlink\" title=\"定义有参数的URL\"></a>定义有参数的URL</h3><p>flask里通过&lt;&gt;来给path指定参数。</p>\n<p>参数类型</p>\n<ul>\n<li><p>string：字符串类型，可以接受除&#x2F;以外的字符。</p>\n</li>\n<li><p>int：整型，可以接受能通过int()方法转换的字符。</p>\n</li>\n<li><p>float：浮点型，可以接受能通过float()方法转换的字符。</p>\n</li>\n<li><p>path：路径，类似string，但是中间可以添加&#x2F;。</p>\n</li>\n<li><p>uuid：UUID类型，UUID是一组32位数的16进制所构成。</p>\n</li>\n<li><p>any：备选值中的任何一个（理解为枚举）。</p>\n</li>\n</ul>\n<h4 id=\"类型一\"><a href=\"#类型一\" class=\"headerlink\" title=\"类型一\"></a>类型一</h4><p>敲写下方代码，程序运行后，可通过   127.0.0.1:8888&#x2F;home&#x2F;任意数字  访问。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@app.route(&#x27;/home/&lt;int:user_id&gt;&#x27;)  # 类型的指定是可选的</span><br><span class=\"line\">def blog_detail(user_id):</span><br><span class=\"line\">    return &#x27;您是：%s&#x27; % user_id</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/01/30/20-31-07/07.png\" alt=\"07\"></p>\n<h4 id=\"类型二\"><a href=\"#类型二\" class=\"headerlink\" title=\"类型二\"></a>类型二</h4><p>敲写下方代码，程序运行后，可通过   127.0.0.1:8888&#x2F;book&#x2F;list?page&#x3D;任意数字  访问。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, request  # 从flask包中导入Flask类</span><br><span class=\"line\"></span><br><span class=\"line\"># /book/list：返回第一页的数据</span><br><span class=\"line\"># /book/list?page=2：返回第二页的数据</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/book/list&#x27;)</span><br><span class=\"line\">def book_list():</span><br><span class=\"line\">    # arguments: 参数</span><br><span class=\"line\">    # request.args: 类字典类型</span><br><span class=\"line\">    page = request.args.get(&quot;page&quot;, default=1, type=int)</span><br><span class=\"line\">    return f&#x27;您获取的是第&#123;page&#125;页的图书列表&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/01/30/20-31-07/08.png\" alt=\"08\"></p>\n<h2 id=\"Jinjia2模板\"><a href=\"#Jinjia2模板\" class=\"headerlink\" title=\"Jinjia2模板\"></a>Jinjia2模板</h2><p>Jinjia2是一个Python模板语言，安装Flask时，Jinjia2会自动安装，Jinjia2模板语言是不分缩进的。</p>\n<h3 id=\"模板渲染\"><a href=\"#模板渲染\" class=\"headerlink\" title=\"模板渲染\"></a>模板渲染</h3><h4 id=\"无参数渲染\"><a href=\"#无参数渲染\" class=\"headerlink\" title=\"无参数渲染\"></a>无参数渲染</h4><p>在templates创建文件index.html。</p>\n<p>index.html内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;h1&gt;这是首页。&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>app.py内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, render_template</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/&#x27;)</span><br><span class=\"line\">def hello_world():</span><br><span class=\"line\">    return render_template(&#x27;index.html&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    app.run()  # 运行项目</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"有参数渲染\"><a href=\"#有参数渲染\" class=\"headerlink\" title=\"有参数渲染\"></a>有参数渲染</h4><p>在templates创建文件user_detail.html。</p>\n<p>user_detail.html内容如下，Jinjia2通过{}来获取变量的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;用户详情&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;h1&gt;用户id是&#123;&#123; user_id &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>app.py内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, render_template</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/home/&lt;user_id&gt;&#x27;)</span><br><span class=\"line\">def user_detail(user_id):</span><br><span class=\"line\">    return render_template(&#x27;user_detail.html&#x27;, user_id=user_id)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    app.run()  # 运行项目</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板访问对象属性\"><a href=\"#模板访问对象属性\" class=\"headerlink\" title=\"模板访问对象属性\"></a>模板访问对象属性</h3><p>Jinjia2访问对象属性有两种方法，例如和。</p>\n<p>index.html内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h1&gt;&#123;&#123; user.user_name &#125;&#125; + &#123;&#123; user.user_email &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>app.py内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, render_template</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">class User:</span><br><span class=\"line\">    def __init__(self, user_name, user_email):</span><br><span class=\"line\">        self.user_name = user_name</span><br><span class=\"line\">        self.user_email = user_email</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/&#x27;)</span><br><span class=\"line\">def hello_world():</span><br><span class=\"line\">    user = User(&quot;lili&quot;, &#x27;123456@qq.com&#x27;)</span><br><span class=\"line\">    return render_template(&#x27;index.html&#x27;, user=user)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><p>在Python中，如果需要对某个变量进行处理，可以通过函数来实现；在模板中，则是通过过滤器来实现的。过滤器本质上也是函数，在模板中使用管道符号（|）来调用。例如有字符串类型变量name，想要获取它的长度，可以通过0来获取，length是Jinjia2内置的过滤器，Jinjia2会把name当做第一个参数传给length过滤器底层对应的函数。</p>\n<h4 id=\"内置过滤器\"><a href=\"#内置过滤器\" class=\"headerlink\" title=\"内置过滤器\"></a>内置过滤器</h4><p>filter.html内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;filter_demo&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    名字：&#123;&#123; user.user_name &#125;&#125;</span><br><span class=\"line\">    名字长度：&#123;&#123; user.user_name|length &#125;&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>app.py内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, render_template</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">class User:</span><br><span class=\"line\">    def __init__(self, user_name, user_email):</span><br><span class=\"line\">        self.user_name = user_name</span><br><span class=\"line\">        self.user_email = user_email</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/filter&#x27;)</span><br><span class=\"line\">def filte_page():</span><br><span class=\"line\">    user = User(&#x27;lili&#x27;, &#x27;123@qq.com&#x27;)</span><br><span class=\"line\">    return render_template(&#x27;filter.html&#x27;, user=user)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h4><p>过滤器本质上是Python的函数，它会把被过滤的值当做第一个参数传给这个函数，函数经过一些逻辑处理后，再返回新的值。在过滤器函数写好后，可以通过@app.template_filter装饰器或者app.add_template_filter函数来把函数注册成Jinjia2能用的过滤器。</p>\n<p>下方代码定义了一个date_format函数，第一个参数是需要被处理的值，第二个参数是时间的格式，并且指定了一个默认值，通过app.add_template_filter，将date_format函数注册成了过滤器，并且过滤器的名字为d_format，如果app.add_template_filter没有传第二个参数，那么默认将使用函数的名称来作为过滤器的名称。</p>\n<p>filter.html内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;filter_demo&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    时间：&#123;&#123; my_time|d_format &#125;&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>app.py内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, render_template</span><br><span class=\"line\">from datetime import datetime</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/filter&#x27;)</span><br><span class=\"line\">def filte_page():</span><br><span class=\"line\">    my_time = datetime.now()</span><br><span class=\"line\">    return render_template(&#x27;filter.html&#x27;, my_time=my_time)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def date_format(value, format=&quot;%Y-%m-%d %H:%M&quot;):</span><br><span class=\"line\">    return value.strftime(format)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.add_template_filter(date_format, &#x27;d_format&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制语句\"><a href=\"#控制语句\" class=\"headerlink\" title=\"控制语句\"></a>控制语句</h3><h4 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h4><p>filter.html内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;filter_demo&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &#123;% if age &gt; 18 %&#125;</span><br><span class=\"line\">        &lt;div&gt;您已满18岁&lt;/div&gt;</span><br><span class=\"line\">    &#123;% elif age == 18 %&#125;</span><br><span class=\"line\">        &lt;div&gt;您刚满18岁&lt;/div&gt;</span><br><span class=\"line\">    &#123;% else %&#125;</span><br><span class=\"line\">        &lt;div&gt;您未满18岁&lt;/div&gt;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>app.py内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, render_template</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/filter&#x27;)</span><br><span class=\"line\">def filte_page():</span><br><span class=\"line\">    age = 17</span><br><span class=\"line\">    return render_template(&#x27;filter.html&#x27;, age=age)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h4><p>Jinjia2中的for循环没有break语句。</p>\n<p>filter.html内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;filter_demo&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &#123;% for student in students %&#125;</span><br><span class=\"line\">        &lt;div&gt;学生姓名：&#123;&#123; student.name &#125;&#125;，学生年龄：&#123;&#123; student.age &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>app.py内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, render_template</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/filter&#x27;)</span><br><span class=\"line\">def filte_page():</span><br><span class=\"line\">    students = [</span><br><span class=\"line\">        &#123;&#x27;name&#x27;:&#x27;lili&#x27;, &#x27;age&#x27;:18&#125;,</span><br><span class=\"line\">        &#123;&#x27;name&#x27;:&#x27;lucy&#x27;, &#x27;age&#x27;:17&#125;,</span><br><span class=\"line\">        &#123;&#x27;name&#x27;:&#x27;lfiv&#x27;, &#x27;age&#x27;:19&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    return render_template(&#x27;filter.html&#x27;, students=students)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    app.run()  # 运行项目</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板继承\"><a href=\"#模板继承\" class=\"headerlink\" title=\"模板继承\"></a>模板继承</h3><p>一个网站中，大部分网页的模块是重复的，比如顶部的导航栏、底部的备案信息等，如果在每个页面中都重复地去写这些代码，会让项目变得臃肿，提高后期维护成本。此时，可以通过模板继承，把一些重复性的代码写在父模板里，子模板继承父模板后，再分别实现自己的代码。</p>\n<p>父模板文件base.html内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;新闻&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&#123;% block body %&#125;</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\">&lt;footer&gt;底部标签&lt;/footer&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>child1.html内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block title %&#125;</span><br><span class=\"line\">    我是子模板</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% block body %&#125;</span><br><span class=\"line\">    我是子模板的文字</span><br><span class=\"line\">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>app.py内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, render_template</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/child1&#x27;)</span><br><span class=\"line\">def child1():</span><br><span class=\"line\">    return render_template(&#x27;child1.html&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加载静态文件\"><a href=\"#加载静态文件\" class=\"headerlink\" title=\"加载静态文件\"></a>加载静态文件</h3><p>static.html内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;static_demo&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;css/style.css&#x27;) &#125;&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;script src=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;js/my.js&#x27;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;img src=&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;images/air.jpg&#x27;) &#125;&#125;&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>app.py内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, render_template</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/static&#x27;)</span><br><span class=\"line\">def static_demo():</span><br><span class=\"line\">    return render_template(&#x27;static.html&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    app.run()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作MySQL\"><a href=\"#操作MySQL\" class=\"headerlink\" title=\"操作MySQL\"></a>操作MySQL</h2><h3 id=\"Python操作MySQL驱动\"><a href=\"#Python操作MySQL驱动\" class=\"headerlink\" title=\"Python操作MySQL驱动\"></a>Python操作MySQL驱动</h3><p>Flask要想操作数据库，必须要先安装Python操作MySQL的驱动，在Python中，目前有以下MySQL驱动包：</p>\n<ul>\n<li>MySQL-python：也就是MySQLdb，是对C语言操作MySQL数据库的一个简单封装，但只支持Python2。</li>\n<li>mysqlclient：是MySQL-python的一个分支，支持Python3并且修复了一些bug，是目前为止执行效率最高的驱动，但是安装的时候容易因为环境问题出错。</li>\n<li>pymysql：纯Python实现的驱动，执行效率不如mysqlclient，可以和Python代码无缝衔接。</li>\n<li>mysql-connector-python：MySQL官方推出的纯Python连接MySQL驱动，执行效率比pymysql慢。</li>\n</ul>\n<h4 id=\"安装pymysql\"><a href=\"#安装pymysql\" class=\"headerlink\" title=\"安装pymysql\"></a>安装pymysql</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install pymysql -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装Flask-SQLAlchemy\"><a href=\"#安装Flask-SQLAlchemy\" class=\"headerlink\" title=\"安装Flask-SQLAlchemy\"></a>安装Flask-SQLAlchemy</h4><p>在Flask中，很少会使用pymysql直接写原生SQL语句去操作数据库，更多的是通过SQLAlchemy提供的ORM技术，其类似于操作普通Python对象那样来实现对数据库的增删改查，而Flask-SQLAlchemy是对SQLAlchemy的一个封装，使得在Flask中使用SQLAlchemy更加方便。Flask-SQLAlchemy需要单独安装，因为Flask-SQLAlchemy依赖SQLAlchemy，所以只要安装了Flask-SQLAlchemy，SQLAlchemy会自动安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install flask-sqlalchemy -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>\n\n<p>SQLAlchemy类似于Jinjia2，是可以独立于Flask而被使用的，完全可以在任何Python程序中被使用。<a href=\"https://www.sqlalchemy.org/\">SQLAlchemy官方链接</a></p>\n<h3 id=\"Flask-SQLAlchemy基本使用\"><a href=\"#Flask-SQLAlchemy基本使用\" class=\"headerlink\" title=\"Flask-SQLAlchemy基本使用\"></a>Flask-SQLAlchemy基本使用</h3><h4 id=\"连接MySQL\"><a href=\"#连接MySQL\" class=\"headerlink\" title=\"连接MySQL\"></a>连接MySQL</h4><p>使用Flask-SQLAlchemy操作数据库之前，需要先创建一个由FLask-SQLAlchemy提供的SQLAlchemy类的对象，在创建这个类的时候，需要传入当前的app，然后要在app.config中设置SQLALCHEMY_DATABASE_URI，来配置数据库的连接。</p>\n<p>app.py内容如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, render_template</span><br><span class=\"line\">from flask_sqlalchemy import SQLAlchemy</span><br><span class=\"line\">from sqlalchemy import text</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">HOSTNAME = &#x27;127.0.0.1&#x27;  # 主机名</span><br><span class=\"line\"></span><br><span class=\"line\">PORT = 3306  # 端口号</span><br><span class=\"line\"></span><br><span class=\"line\">USERNAME = &#x27;root&#x27;  # 连接MySQL的用户名</span><br><span class=\"line\"></span><br><span class=\"line\">PASSWORD = &#x27;123456&#x27;  # 连接MySQL的密码</span><br><span class=\"line\"></span><br><span class=\"line\">DATABASE = &#x27;db_flask_test&#x27;  # 在MySQL创建的数据库名称</span><br><span class=\"line\"></span><br><span class=\"line\">app.config[&#x27;SQLALCHEMY_DATABASE_URI&#x27;] = f&#x27;mysql+pymysql://&#123;USERNAME&#125;:  \t  \t &#123;PASSWORD&#125;@&#123;HOSTNAME&#125;:&#123;PORT&#125;/&#123;DATABASE&#125;?charset=utf8mb4&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">db = SQLAlchemy(app)</span><br><span class=\"line\"></span><br><span class=\"line\"># 在app.config中设置好连接的数据库信息，然后使用SQLAlchemy(app)创建一个db对象，QLAlchemy会自动读取app.config中连接数据库的信息</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试是否连接成功</span><br><span class=\"line\">with app.app_context():  //应用上下文</span><br><span class=\"line\">    with db.engine.connect() as conn:</span><br><span class=\"line\">        rs = conn.execute(text(&quot;select 1&quot;))</span><br><span class=\"line\">        print(rs.fetchone())  //若打印1，则说明连接成功</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/&#x27;)</span><br><span class=\"line\">def hello_world():</span><br><span class=\"line\">    return render_template(&#x27;index.html&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">    app.run()  # 运行项目</span><br></pre></td></tr></table></figure>\n\n<p>注：测试时若报错，提示语句不是可执行的对象，可以使用sqlalchemy.text() 函数对语句进行封装。</p>\n<h4 id=\"ORM模型与表的映射\"><a href=\"#ORM模型与表的映射\" class=\"headerlink\" title=\"ORM模型与表的映射\"></a>ORM模型与表的映射</h4><h5 id=\"ORM模型\"><a href=\"#ORM模型\" class=\"headerlink\" title=\"ORM模型\"></a>ORM模型</h5><p>对象关系映射（Object Relationship Mapping），简称ORM，是一种可以用Python面向对象的方式来操作关系型数据库的技术，具有可以映射到数据库表能力的Python类我们称之为ORM模型。一个ORM模型与数据库中一个表相对应，ORM模型中的每个类属性分别对应表的每个字段，ORM模型的每个实例对象对应表中每条记录。ORM技术提供了面向对象的SQL交互的桥梁，让开发者用面向对象的方式操作数据库，使用ORM模型具有以下优势：</p>\n<ul>\n<li>开发效率高：几乎不需要写原生SQL语句，使用纯Python的方式操作数据库。</li>\n<li>安全性高：ORM模型底层代码对一些常见的安全问题，比如SQL注入做了防护，比直接使用SQL语句更加安全。</li>\n<li>灵活性强：Flask-SQLAlchemy底层支持SQLite、MySQL、Oracle、PostgreSQL等关系型数据库，但针对不同数据库，ORM模型代码几乎一模一样，只需要修改少量代码，即可完成底层数据库的更换。</li>\n</ul>\n<h5 id=\"映射方法\"><a href=\"#映射方法\" class=\"headerlink\" title=\"映射方法\"></a>映射方法</h5><h6 id=\"法一——通过db-create-all-映射。\"><a href=\"#法一——通过db-create-all-映射。\" class=\"headerlink\" title=\"法一——通过db.create_all()映射。\"></a>法一——通过db.create_all()映射。</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">with app.app_context():</span><br><span class=\"line\">    db.create_all()  # 将所有的表同步到数据库中</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"法二——通过flask-migrate映射。\"><a href=\"#法二——通过flask-migrate映射。\" class=\"headerlink\" title=\"法二——通过flask-migrate映射。\"></a>法二——通过flask-migrate映射。</h6><p>db.create_all()只能识别新增了哪些模型，把新增的模型同步到数据库中，若是模型中字段值改变，它无法识别，这种情况下需要使用flask-migrate。</p>\n<p>安装flask-migrate代码如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install flask-migrate -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>\n\n<p>flask-migrate三部曲，在命令行中执行如下指令。</p>\n<ul>\n<li>flask db init：只执行一次，执行后生成migrations文件夹。</li>\n<li>flask db migrate：识别ORM模型的改变，生成迁移脚本。</li>\n<li>flask db upgrade：运行迁移脚本，同步到数据库中。</li>\n</ul>\n<h4 id=\"MySQL的增删改查\"><a href=\"#MySQL的增删改查\" class=\"headerlink\" title=\"MySQL的增删改查\"></a>MySQL的增删改查</h4><p>使用ORM进行增删改查操作，需要先把操作添加到会话中，通过db.session可以获取到会话对象，会话对象只是在内存中，如果要把会话中的操作提交到数据库中，需要调用db.session.commit()操作，如果想要把会话中的操作回滚，则可以通过db.session.rollback()实现。</p>\n<h5 id=\"增加数据\"><a href=\"#增加数据\" class=\"headerlink\" title=\"增加数据\"></a>增加数据</h5><p>使用ORM创建一条数据，首先需使用ORM模型创建一个对象，然后添加到会话中，再进行commit操作即可。创建对象时，必须要通过关键字参数给字段赋值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class User(db.Model):</span><br><span class=\"line\">    __tablename__ = &#x27;user&#x27;</span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True, autoincrement=True)</span><br><span class=\"line\">    username = db.Column(db.String(100), nullable=False)</span><br><span class=\"line\">    password = db.Column(db.String(100), nullable=False)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&quot;/user/add&quot;)</span><br><span class=\"line\">def add_user():</span><br><span class=\"line\">    # 1. 创建ORM对象</span><br><span class=\"line\">    user = User(username=&quot;张三&quot;, password=&quot;123456&quot;)  </span><br><span class=\"line\">    # sql: insert into user(username, password) values(&#x27;张三&#x27;, &#x27;123456&#x27;)</span><br><span class=\"line\">    # 2. 将ORM对象添加到db.session中</span><br><span class=\"line\">    db.session.add(user)</span><br><span class=\"line\">    # 3. 将db.session中的改变同步到数据库中</span><br><span class=\"line\">    db.session.commit()</span><br><span class=\"line\">    return &#x27;用户添加成功&#x27;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查找数据\"><a href=\"#查找数据\" class=\"headerlink\" title=\"查找数据\"></a>查找数据</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class User(db.Model):</span><br><span class=\"line\">    __tablename__ = &#x27;user&#x27;</span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True, autoincrement=True)</span><br><span class=\"line\">    username = db.Column(db.String(100), nullable=False)</span><br><span class=\"line\">    password = db.Column(db.String(100), nullable=False)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&quot;/user/query&quot;)</span><br><span class=\"line\">def query_user():</span><br><span class=\"line\">    # 1. get查找：根据主键查找</span><br><span class=\"line\">    user = User.query.get(1)</span><br><span class=\"line\">    print(f&#x27;&#123;user.id&#125;-&#123;user.username&#125;-&#123;user.password&#125;&#x27;)</span><br><span class=\"line\">    # 2. filter_by查找，返回Query数组</span><br><span class=\"line\">    users = User.query.filter_by(username=&#x27;张三&#x27;)</span><br><span class=\"line\">    for user in users:</span><br><span class=\"line\">        print(user.username)</span><br><span class=\"line\">    return &#x27;数据查找成功！&#x27;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"修改数据\"><a href=\"#修改数据\" class=\"headerlink\" title=\"修改数据\"></a>修改数据</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class User(db.Model):</span><br><span class=\"line\">    __tablename__ = &#x27;user&#x27;</span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True, autoincrement=True)</span><br><span class=\"line\">    username = db.Column(db.String(100), nullable=False)</span><br><span class=\"line\">    password = db.Column(db.String(100), nullable=False)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&quot;/user/update&quot;)</span><br><span class=\"line\">def update_user():</span><br><span class=\"line\">    user = User.query.filter_by(username=&#x27;张三&#x27;).first()</span><br><span class=\"line\">    user.password = &#x27;654321&#x27;</span><br><span class=\"line\">    db.session.commit()</span><br><span class=\"line\">    return &#x27;数据修改成功&#x27;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class User(db.Model):</span><br><span class=\"line\">    __tablename__ = &#x27;user&#x27;</span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True, autoincrement=True)</span><br><span class=\"line\">    username = db.Column(db.String(100), nullable=False)</span><br><span class=\"line\">    password = db.Column(db.String(100), nullable=False)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/user/delete&#x27;)</span><br><span class=\"line\">def delete_user():</span><br><span class=\"line\">    # 1. 查找</span><br><span class=\"line\">    user = User.query.get(1)</span><br><span class=\"line\">    # 2. 从db.session中删除</span><br><span class=\"line\">    db.session.delete(user)</span><br><span class=\"line\">    # 3. 将db.session中的修改同步到数据库中</span><br><span class=\"line\">    db.session.commit()</span><br><span class=\"line\">    return &#x27;数据删除成功&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ORM模型外键与表的关系\"><a href=\"#ORM模型外键与表的关系\" class=\"headerlink\" title=\"ORM模型外键与表的关系\"></a>ORM模型外键与表的关系</h4><p>关系型数据库中，多个表之间可以建立关系，表关系总体上可以分成三种，分别是：一对一、一对多（多对一）、多对多，表关系的建立是通过数据库层面的外键来实现的，创建外键是通过db.ForeignKey实现的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">class User(db.Model):</span><br><span class=\"line\">    __tablename__ = &#x27;user&#x27;</span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True, autoincrement=True)</span><br><span class=\"line\">    username = db.Column(db.String(100), nullable=False)</span><br><span class=\"line\">    password = db.Column(db.String(100), nullable=False)</span><br><span class=\"line\"></span><br><span class=\"line\">    articles = db.relationship(&#x27;Article&#x27;, back_populates=&#x27;author&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">class Article(db.Model):</span><br><span class=\"line\">    __tablename__ = &#x27;article&#x27;</span><br><span class=\"line\">    id = db.Column(db.Integer, primary_key=True, autoincrement=True)</span><br><span class=\"line\">    title = db.Column(db.String(200), nullable=False)</span><br><span class=\"line\">    content = db.Column(db.Text, nullable=False)</span><br><span class=\"line\"></span><br><span class=\"line\">    author_id = db.Column(db.Integer, db.ForeignKey(&quot;user.id&quot;))</span><br><span class=\"line\">    author = db.relationship(&#x27;User&#x27;, back_populates=&#x27;articles&#x27;)</span><br><span class=\"line\">    # author = db.relationship(&#x27;User&#x27;, backref=&#x27;articles&#x27;), backref会自动给User模型添加一个article属性，用来获取文章列表</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&quot;/article/add&quot;)</span><br><span class=\"line\">def article_add():</span><br><span class=\"line\">    article1 = Article(title=&#x27;Flask学习&#x27;, content=&quot;xxxxx&quot;)</span><br><span class=\"line\">    article1.author = User.query.get(2)</span><br><span class=\"line\"></span><br><span class=\"line\">    article2 = Article(title=&#x27;Django学习&#x27;, content=&#x27;xxxxx&#x27;)</span><br><span class=\"line\">    article2.author = User.query.get(2)</span><br><span class=\"line\"></span><br><span class=\"line\">    # 添加到session中</span><br><span class=\"line\">    db.session.add_all([article1, article2])</span><br><span class=\"line\">    # 同步session中的数据到数据库中</span><br><span class=\"line\">    db.session.commit()</span><br><span class=\"line\">    return &#x27;文章添加成功&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/article/query&#x27;)</span><br><span class=\"line\">def query_article():</span><br><span class=\"line\">    user = User.query.get(2)</span><br><span class=\"line\">    for article in user.articles:</span><br><span class=\"line\">        print(article.title)</span><br><span class=\"line\">    return &#x27;文章查找成功&#x27;</span><br></pre></td></tr></table></figure>\n\n","categories":["Flask"]},{"title":"在Chrome中安装扩展程序","url":"/2023/01/10/10-46-12/","content":"<p>场景：在Chrome中安装NetBeans Connector插件，将下载好的crx文件拖到扩展程序页面时，发现该插件并没有安装成功。</p>\n<p>分析：浏览器默认禁用了拖入安装 .crx 扩展的功能，导致crx 文件不能直接拖入扩展程序安装。</p>\n<p>解决方法： 输入网址：chrome:&#x2F;&#x2F;flags&#x2F;，找到 Extensions on chrome:&#x2F;&#x2F; URLs，将Disabled改为Enabled，重启浏览器并开启开发者模式，即可直接拖入crx文件进行安装。</p>\n<p><img src=\"/2023/01/10/10-46-12/1.png\" alt=\"1\"> </p>\n","categories":["疑难杂症"]},{"title":"在Python中使用Process创建子进程遇到的问题","url":"/2022/11/25/14-24-51/","content":"<p>假如使用Process创建子进程，那么在最后的函数调用时需要加上if _<em>name</em>_ &#x3D;&#x3D; “__main__”:语句，否则会报错。</p>\n<h1 id=\"未使用该语句\"><a href=\"#未使用该语句\" class=\"headerlink\" title=\"未使用该语句\"></a>未使用该语句</h1><h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_input</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start print info!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Process(target=test_input).start()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果示例\"><a href=\"#结果示例\" class=\"headerlink\" title=\"结果示例\"></a>结果示例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">RuntimeError: </span><br><span class=\"line\">        An attempt has been made to start a new process before the</span><br><span class=\"line\">        current process has finished its bootstrapping phase.</span><br><span class=\"line\"></span><br><span class=\"line\">        This probably means that you are not using fork to start your</span><br><span class=\"line\">        child processes and you have forgotten to use the proper idiom</span><br><span class=\"line\">        in the main module:</span><br><span class=\"line\"></span><br><span class=\"line\">            if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">                freeze_support()</span><br><span class=\"line\">                ...</span><br><span class=\"line\"></span><br><span class=\"line\">        The &quot;freeze_support()&quot; line can be omitted if the program</span><br><span class=\"line\">        is not going to be frozen to produce an executable.</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用该语句\"><a href=\"#使用该语句\" class=\"headerlink\" title=\"使用该语句\"></a>使用该语句</h1><h2 id=\"代码示例-1\"><a href=\"#代码示例-1\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> multiprocessing <span class=\"keyword\">import</span> Process</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">test_input</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;start print info!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    Process(target=test_input).start()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结果示例-1\"><a href=\"#结果示例-1\" class=\"headerlink\" title=\"结果示例\"></a>结果示例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">start print info!</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n","categories":["疑难杂症"]}]